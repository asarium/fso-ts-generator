{
  "actions": [
    {
      "description": "",
      "hookVars": [],
      "name": "On Action",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Action Stopped",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Afterburner Engage",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Afterburner Stop",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Asteroid Collision",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Beam Collision",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Beam Fire",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Briefing Stage",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Campaign Mission Accept",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Death",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Debris Collision",
      "overridable": true
    },
    {
      "description": "Called when a ship starts the departure process.",
      "hookVars": [
        {
          "description": "The ship that has began the depture process.",
          "name": "Ship",
          "type": "ship"
        }
      ],
      "name": "On Departure Started",
      "overridable": false
    },
    {
      "description": "Called every frame as the last action before showing the frame result to the user.",
      "hookVars": [],
      "name": "On Frame",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Game Init",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Gameplay Start",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Goals Cleared",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On HUD Draw",
      "overridable": true
    },
    {
      "description": "Called when a HUD message is received. For normal messages this will be called with the final text that appears on the HUD (e.g. [ship]: [message]). Will also be called for engine generated messages.",
      "hookVars": [
        {
          "description": "The text of the message.",
          "name": "Text",
          "type": "string"
        },
        {
          "description": "The type of message sent by the engine.",
          "name": "SourceType",
          "type": "number"
        }
      ],
      "name": "On HUD Message Received",
      "overridable": false
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Key Pressed",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Key Released",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Load Screen",
      "overridable": true
    },
    {
      "description": "Invoked when a mission sends a message.",
      "hookVars": [
        {
          "description": "The name of the message in the mission",
          "name": "Name",
          "type": "string"
        },
        {
          "description": "The text of the sent message. This will have any placeholder expanded (e.g. SEXP variables) and will be what the player sees on the HUD.",
          "name": "Message",
          "type": "string"
        },
        {
          "description": "The source of the message as a string. Same as used by the engine on the HUD.",
          "name": "SenderString",
          "type": "string"
        },
        {
          "description": "true if this is a builtin message, false of this is a mission message",
          "name": "Builtin",
          "type": "boolean"
        },
        {
          "description": "If sent from an object, the object that has sent the message. Invalid if not sent from an object",
          "name": "Sender",
          "type": "ship"
        },
        {
          "description": "The scripting handle of the message being sent.",
          "name": "MessageHandle",
          "type": "message"
        }
      ],
      "name": "On Message Received",
      "overridable": false
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Mission End",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Mission Start",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Mouse Moved",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Mouse Pressed",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Mouse Released",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Object Render",
      "overridable": true
    },
    {
      "description": "Called when a pain flash is displayed.",
      "hookVars": [
        {
          "description": "The type of pain flash displayed: shield = 0 and hull = 1.",
          "name": "Pain_Type",
          "type": "number"
        }
      ],
      "name": "On Pain Flash",
      "overridable": false
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Primary Fire",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Secondary Fire",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Ship Arrive",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Ship Collision",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Ship Depart",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Simulation",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Splash Screen",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On State End",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On State Start",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Subsystem Destroyed",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Turret Fired",
      "overridable": true
    },
    {
      "description": "Called when a ship warps in",
      "hookVars": [
        {
          "description": "The object that is warping in.",
          "name": "Self",
          "type": "ship"
        }
      ],
      "name": "On Warp In",
      "overridable": true
    },
    {
      "description": "Called when a ship warps out",
      "hookVars": [
        {
          "description": "The object that is warping out.",
          "name": "Self",
          "type": "ship"
        }
      ],
      "name": "On Warp Out",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Waypoints Done",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Collision",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Created",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Delete",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Deselected",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Equipped",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Fired",
      "overridable": true
    },
    {
      "description": "",
      "hookVars": [],
      "name": "On Weapon Selected",
      "overridable": true
    }
  ],
  "conditions": [
    "State",
    "Campaign",
    "Mission",
    "Object Type",
    "Ship",
    "Ship class",
    "Ship type",
    "Weapon class",
    "KeyPress",
    "Action",
    "Version",
    "Application"
  ],
  "elements": [
    {
      "children": [
        {
          "children": [],
          "description": "Creates a promise that resolves when the resolve function of the callback is called or errors if the reject function is called. The function will be called on it's own.",
          "name": "promise",
          "parameters": "function(function resolve(...), function reject(...))",
          "returnDocumentation": "The promise or nil on error",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a resolved promise with the values passed to this function.",
          "name": "resolved",
          "parameters": "...",
          "returnDocumentation": "Resolved promise",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates an errored promise with the values passed to this function.",
          "name": "errored",
          "parameters": "...",
          "returnDocumentation": "Errored promise",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Runs an asynchronous function",
          "name": "run",
          "parameters": "function body()",
          "returnDocumentation": "A promise that resolves with the return value of the body when it reaches a return statement",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Suspends an asynchronous coroutine until the passed promise resolves.",
          "name": "await",
          "parameters": "promise",
          "returnDocumentation": "The resolve value of the promise",
          "returnType": "unknown",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Support library for asynchronous operations",
      "name": "Async",
      "shortName": "async",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Return a sound entry matching the specified index or name. If you are using a number then the first valid index is 1",
          "name": "getSoundentry",
          "parameters": "string/number",
          "returnDocumentation": "soundentry or invalid handle on error",
          "returnType": "soundentry",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Loads the specified sound file",
          "name": "loadSoundfile",
          "parameters": "string filename",
          "returnDocumentation": "A soundfile handle",
          "returnType": "soundfile",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays the specified sound entry handle",
          "name": "playSound",
          "parameters": "soundentry",
          "returnDocumentation": "A handle to the playing sound",
          "returnType": "sound",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays the specified sound as a looping sound",
          "name": "playLoopingSound",
          "parameters": "soundentry",
          "returnDocumentation": "A handle to the playing sound or invalid handle if playback failed",
          "returnType": "sound",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays the specified sound entry handle. Source if by default 0, 0, 0 and listener is by default the current viewposition",
          "name": "play3DSound",
          "parameters": "soundentry[, vector source[, vector listener]]",
          "returnDocumentation": "A handle to the playing sound",
          "returnType": "sound3D",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays a sound from #Game Sounds in sounds.tbl. A priority of 0 indicates that the song must play; 1-3 will specify the maximum number of that sound that can be played",
          "name": "playGameSound",
          "parameters": "Sound index, [Panning (-1.0 left to 1.0 right), Volume %, Priority 0-3, Voice Message?]",
          "returnDocumentation": "True if sound was played, false if not (Replaced with a sound instance object in the future)",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays a sound from #Interface Sounds in sounds.tbl",
          "name": "playInterfaceSound",
          "parameters": "Sound index",
          "returnDocumentation": "True if sound was played, false if not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays a sound from #Interface Sounds in sounds.tbl by specifying the name of the sound entry. Sounds using the retail sound syntax can be accessed by specifying the index number as a string.",
          "name": "playInterfaceSoundByName",
          "parameters": "string name",
          "returnDocumentation": "True if sound was played, false if not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays a music file using FS2Open's builtin music system. Volume is currently ignored, uses players music volume setting. Files passed to this function are looped by default.",
          "name": "playMusic",
          "parameters": "string Filename, [float volume = 1.0, bool looping = true]",
          "returnDocumentation": "Audiohandle of the created audiostream, or -1 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Stops a playing music file, provided audiohandle is valid. If the 3rd arg is set to one of briefing,credits,mainhall then that music will be stopped despite the audiohandle given.",
          "name": "stopMusic",
          "parameters": "int audiohandle, [bool fade = false], [string 'briefing|credits|mainhall']",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Pauses or unpauses a playing music file, provided audiohandle is valid. The boolean argument should be true to pause and false to unpause. If the audiohandle is -1, *all* audio streams are paused or unpaused.",
          "name": "pauseMusic",
          "parameters": "int audiohandle, bool pause",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Sound/Music Library",
      "name": "Audio",
      "shortName": "ad",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Prints a string",
          "name": "print",
          "parameters": "string Message",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Displays a FreeSpace warning (debug build-only) message with the string provided",
          "name": "warning",
          "parameters": "string Message",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Displays a FreeSpace error message with the string provided",
          "name": "error",
          "parameters": "string Message",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Given 0, 3, or 9 arguments, creates an orientation object with that orientation.",
          "name": "createOrientation",
          "parameters": "[p/r1c1, b/r1c2, h/r1c3, r2c1, r2c2, r2c3, r3c1, r3c2, r3c3]",
          "returnDocumentation": "New orientation object, or null orientation on failure",
          "returnType": "orientation",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a vector object",
          "name": "createVector",
          "parameters": "[x, y, z]",
          "returnDocumentation": "Vector object",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "The overall frame time in seconds since the engine has started",
          "name": "getFrametimeOverall",
          "parameters": "",
          "returnDocumentation": "Overall time (seconds)",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets how long this frame is calculated to take. Use it to for animations, physics, etc to make incremental changes.",
          "name": "getFrametime",
          "parameters": "[Do not adjust for time compression (Boolean)]",
          "returnDocumentation": "Frame time (seconds)",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current FreeSpace state; if a depth is specified, the state at that depth is returned. (IE at the in-game options game, a depth of 1 would give you the game state, while the function defaults to 0, which would be the options screen.",
          "name": "getCurrentGameState",
          "parameters": "[Depth (number)]",
          "returnDocumentation": "Current game state at specified depth, or invalid handle if no game state is active yet",
          "returnType": "gamestate",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets this computers current MP status",
          "name": "getCurrentMPStatus",
          "parameters": "NIL",
          "returnDocumentation": "Current MP status",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets a handle of the currently used player.<br><b>Note:</b> If there is no current player then the first player will be returned, check the game state to make sure you have a valid player handle.",
          "name": "getCurrentPlayer",
          "parameters": "",
          "returnDocumentation": "Player handle",
          "returnType": "player",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Loads the player with the specified callsign.",
          "name": "loadPlayer",
          "parameters": "string callsign",
          "returnDocumentation": "Player handle or invalid handle on load failure",
          "returnType": "player",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Saves the specified player.",
          "name": "savePlayer",
          "parameters": "player plr",
          "returnDocumentation": "true of successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the current control mode for the game.",
          "name": "setControlMode",
          "parameters": "NIL or enumeration LE_*_CONTROL",
          "returnDocumentation": "Current control mode",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the current control mode for the game.",
          "name": "setButtonControlMode",
          "parameters": "NIL or enumeration LE_*_BUTTON_CONTROL",
          "returnDocumentation": "Current control mode",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the control info handle.",
          "name": "getControlInfo",
          "parameters": "",
          "returnDocumentation": "control info handle",
          "returnType": "control_info",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets whether to display tips of the day the next time the current pilot enters the mainhall.",
          "name": "setTips",
          "parameters": "True or false",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the difficulty level from 1-5, 1 being the lowest, (Very Easy) and 5 being the highest (Insane)",
          "name": "getGameDifficulty",
          "parameters": "",
          "returnDocumentation": "Difficulty level as integer",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets current game event. Note that you can crash FreeSpace 2 by posting an event at an improper time, so test extensively if you use it.",
          "name": "postGameEvent",
          "parameters": "gameevent Event",
          "returnDocumentation": "True if event was posted, false if passed event was invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the translated version of text with the given id. The uses the tstrings table for performing the translation. Passing -1 as the id will always return the given text.",
          "name": "XSTR",
          "parameters": "string text, number id",
          "returnDocumentation": "The translated text",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determine if the current script is running in the mission editor (e.g. FRED2). This should be used to control which code paths will be executed even if running in the editor.",
          "name": "inMissionEditor",
          "parameters": "",
          "returnDocumentation": "true when we are in the mission editor, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the current version of the engine is at least the specified version. This can be used to check if a feature introduced in a later version of the engine is available.",
          "name": "isEngineVersionAtLeast",
          "parameters": "number major, number minor, number build[, number revision = 0]",
          "returnDocumentation": "true if the version is at least the specified version. false otherwise.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines the language that is being used by the engine. This returns the full name of the language (e.g. \"English\").",
          "name": "getCurrentLanguage",
          "parameters": "",
          "returnDocumentation": "The current game language",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines the file extension of the language that is being used by the engine. This returns a short code for the current language that can be used for creating language specific file names (e.g. \"gr\" when the current language is German). This will return an empty string for the default language.",
          "name": "getCurrentLanguageExtension",
          "parameters": "",
          "returnDocumentation": "The current game language",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns a string describing the version of the build that is currently running. This is mostly intended to be displayed to the user and not processed by a script so don't rely on the exact format of the string.",
          "name": "getVersionString",
          "parameters": "",
          "returnDocumentation": "The version information",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines if the game is currently in single- or multiplayer mode",
          "getterType": "boolean",
          "name": "MultiplayerMode",
          "returnDocumentation": "true if in multiplayer mode, false if in singleplayer. If neither is the case (e.g. on game init) nil will be returned",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of game events",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Game event, or invalid gameevent handle if index is invalid",
              "returnType": "gameevent",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of events",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of events",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Freespace 2 game events",
          "name": "GameEvents",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of game states",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Game state, or invalid gamestate handle if index is invalid",
              "returnType": "gamestate",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of states",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of states",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Freespace 2 states",
          "name": "GameStates",
          "shortName": "",
          "type": "library"
        }
      ],
      "description": "Base FreeSpace 2 functions",
      "name": "Base",
      "shortName": "ba",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Values for which bitwise boolean AND operation is performed",
          "name": "AND",
          "parameters": "number, number",
          "returnDocumentation": "Result of the AND operation",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Values for which bitwise boolean OR operation is performed",
          "name": "OR",
          "parameters": "number, number",
          "returnDocumentation": "Result of the OR operation",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Values for which bitwise boolean XOR operation is performed",
          "name": "XOR",
          "parameters": "number, number",
          "returnDocumentation": "Result of the XOR operation",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Toggles the value of the set bit in the given number for 32 bit integer",
          "name": "toggleBit",
          "parameters": "number, number (bit)",
          "returnDocumentation": "Result of the operation",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks the value of the set bit in the given number for 32 bit integer",
          "name": "checkBit",
          "parameters": "number, number (bit)",
          "returnDocumentation": "Was the bit true of false",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Performs inclusive or (OR) operation on the set bit of the value",
          "name": "addBit",
          "parameters": "number, number (bit)",
          "returnDocumentation": "Result of the operation",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Bitwise Operations library",
      "name": "BitOps",
      "shortName": "bit",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets next mission filename",
          "name": "getNextMissionFilename",
          "parameters": "",
          "returnDocumentation": "Next mission filename, or nil if the next mission is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets previous mission filename",
          "name": "getPrevMissionFilename",
          "parameters": "",
          "returnDocumentation": "Previous mission filename, or nil if the previous mission is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Jumps to a mission based on the filename. Optionally, the player can be sent to a hub mission without setting missions to skipped.",
          "name": "jumpToMission",
          "parameters": "string filename, [boolean hub]",
          "returnDocumentation": "Jumps to a mission, or returns nil.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Campaign Library",
      "name": "Campaign",
      "shortName": "ca",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Deletes given file. Path must be specified. Use a slash for the root directory.",
          "name": "deleteFile",
          "parameters": "string Filename, string Path",
          "returnDocumentation": "True if deleted, false",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if a file exists. Use a blank string for path for any directory, or a slash for the root directory.",
          "name": "fileExists",
          "parameters": "string Filename, [string Path = \"\", boolean CheckVPs = false]",
          "returnDocumentation": "True if file exists, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Lists all the files in the specified directory and optionally applies a filter. The filter must have the format \"*<rest>\" (the wildcard has to appear at the start).",
          "name": "listFiles",
          "parameters": "string directory, string filter",
          "returnDocumentation": "A table with all files in the directory or nil on error",
          "returnType": {
            "element": "string",
            "type": "list"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Opens a file. 'Mode' uses standard C fopen arguments. Use a blank string for path for any directory, or a slash for the root directory.Be EXTREMELY CAREFUL when using this function, as you may PERMANENTLY delete any file by accident",
          "name": "openFile",
          "parameters": "string Filename, [string Mode=\"r\", string Path = \"\"]",
          "returnDocumentation": "File handle, or invalid file handle if the specified file couldn't be opened",
          "returnType": "file",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Opens a temp file that is automatically deleted when closed",
          "name": "openTempFile",
          "parameters": "",
          "returnDocumentation": "File handle, or invalid file handle if tempfile couldn't be created",
          "returnType": "file",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Renames given file. Path must be specified. Use a slash for the root directory.",
          "name": "renameFile",
          "parameters": "string CurrentFilename, string NewFilename, string Path",
          "returnDocumentation": "True if file was renamed, otherwise false",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "CFile FS2 filesystem access",
      "name": "CFile",
      "shortName": "cf",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets Mouse X pos",
          "name": "getMouseX",
          "parameters": "",
          "returnDocumentation": "Mouse x position, or 0 if mouse is not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets Mouse Y pos",
          "name": "getMouseY",
          "parameters": "",
          "returnDocumentation": "Mouse y position, or 0 if mouse is not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns whether the specified mouse buttons are up or down",
          "name": "isMouseButtonDown",
          "parameters": "{MOUSE_*_BUTTON enumeration}, [..., ...]",
          "returnDocumentation": "Whether specified mouse buttons are down, or false if mouse is not initialized yet",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets mouse cursor image, and allows you to lock/unlock the image. (A locked cursor may only be changed with the unlock parameter)",
          "name": "setCursorImage",
          "parameters": "Image filename",
          "returnDocumentation": "true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Hides the cursor when <i>hide</i> is true, otherwise shows it. <i>grab</i> determines if the mouse will be restricted to the window. Set this to true when hiding the cursor while in game. By default grab will be true when we are in the game play state, false otherwise.",
          "name": "setCursorHidden",
          "parameters": "boolean hide[, boolean grab]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "function to force mouse position",
          "name": "forceMousePosition",
          "parameters": "number, number (coordinates)",
          "returnDocumentation": "if the operation succeeded or not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets and sets the retail mouse control status",
          "getterType": "boolean",
          "name": "MouseControlStatus",
          "returnDocumentation": "if the retail mouse is on or off",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets mouse sensitivity setting",
          "name": "getMouseSensitivity",
          "parameters": "",
          "returnDocumentation": "Mouse sensitivity in range of 0-9",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets joystick sensitivity setting",
          "name": "getJoySensitivity",
          "parameters": "",
          "returnDocumentation": "Joystick sensitivity in range of 0-9",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets joystick deadzone setting",
          "name": "getJoyDeadzone",
          "parameters": "",
          "returnDocumentation": "Joystick deadzone in range of 0-9",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Updates Tracking Data. Call before using get functions",
          "name": "updateTrackIR",
          "parameters": "",
          "returnDocumentation": "Checks if trackir is available and updates variables, returns true if successful, otherwise false",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets pitch axis from last update",
          "name": "getTrackIRPitch",
          "parameters": "",
          "returnDocumentation": "Pitch value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets yaw axis from last update",
          "name": "getTrackIRYaw",
          "parameters": "",
          "returnDocumentation": "Yaw value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets roll axis from last update",
          "name": "getTrackIRRoll",
          "parameters": "",
          "returnDocumentation": "Roll value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets x position from last update",
          "name": "getTrackIRX",
          "parameters": "",
          "returnDocumentation": "X value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets y position from last update",
          "name": "getTrackIRY",
          "parameters": "",
          "returnDocumentation": "Y value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets z position from last update",
          "name": "getTrackIRZ",
          "parameters": "",
          "returnDocumentation": "Z value -1 to 1, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Controls library",
      "name": "Controls",
      "shortName": "io",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Adds a function to be called from the specified game hook",
          "name": "addHook",
          "parameters": "string name, function hookFunction, [table conditionals = {}], [function override_func = return false]",
          "returnDocumentation": "true if hook was installed properly, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Executes a <b>blocking</b> sleep. Usually only necessary for development or testing purposes. Use with care!",
          "name": "sleep",
          "parameters": "number seconds",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Basic engine access functions",
      "name": "Engine",
      "shortName": "engine",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "description": "Gets camera",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Ship handle, or invalid ship handle if index was invalid",
              "returnType": "camera",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Gets number of cameras",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of cameras",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Cameras",
          "name": "Cameras",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Number of loaded fonts",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of loaded fonts",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Array of loaded fonts",
              "name": "__indexer",
              "parameters": "number Index/string Filename",
              "returnDocumentation": "Font handle, or invalid font handle if index is invalid",
              "returnType": "font",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Font library",
          "name": "Fonts",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [],
          "description": "Current font",
          "getterType": "font",
          "name": "CurrentFont",
          "returnDocumentation": "",
          "setterType": "font",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets the name of the specified post-processing index",
              "name": "__indexer",
              "parameters": "number index",
              "returnDocumentation": "post-processing name or empty string on error",
              "returnType": "string",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Gets the number of available post-processing effects",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "number of post-processing effects or 0 on error",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Post-processing effects",
          "name": "PostEffects",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [],
          "description": "Sets the intensity of the specified post-processing effect. Optionally sets RGB values for effects that use them (valid values are 0.0 to 1.0)",
          "name": "setPostEffect",
          "parameters": "string name, [number value=0, number red=0.0, number green=0.0, number blue=0.0]",
          "returnDocumentation": "true when successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Resets all post-processing effects to their default values",
          "name": "resetPostEffects",
          "parameters": "",
          "returnDocumentation": "true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Current alpha blending type; uses ALPHABLEND_* enumerations",
          "getterType": "enumeration",
          "name": "CurrentOpacityType",
          "returnDocumentation": "",
          "setterType": "enumeration",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Current rendering target",
          "getterType": "texture",
          "name": "CurrentRenderTarget",
          "returnDocumentation": "Current rendering target, or invalid texture handle if screen is render target",
          "setterType": "texture",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Clears the screen to black, or the color specified.",
          "name": "clearScreen",
          "parameters": "[number red, number green, number blue, number alpha]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a new camera using the specified position and orientation (World)",
          "name": "createCamera",
          "parameters": "string Name, [wvector Position, orientation Orientation]",
          "returnDocumentation": "Camera handle, or invalid camera handle if camera couldn't be created",
          "returnType": "camera",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns whether the standard interface is stretched",
          "name": "isMenuStretched",
          "parameters": "",
          "returnDocumentation": "True if stretched, false if aspect ratio is maintained",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets screen width",
          "name": "getScreenWidth",
          "parameters": "",
          "returnDocumentation": "Width in pixels, or 0 if graphics are not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets screen height",
          "name": "getScreenHeight",
          "parameters": "",
          "returnDocumentation": "Height in pixels, or 0 if graphics are not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets width of center monitor (should be used in conjuction with getCenterOffsetX)",
          "name": "getCenterWidth",
          "parameters": "",
          "returnDocumentation": "Width of center monitor in pixels, or 0 if graphics are not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets height of center monitor (should be used in conjuction with getCenterOffsetY)",
          "name": "getCenterHeight",
          "parameters": "",
          "returnDocumentation": "Height of center monitor in pixels, or 0 if graphics are not initialized yet",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets X offset of center monitor",
          "name": "getCenterOffsetX",
          "parameters": "",
          "returnDocumentation": "X offset of center monitor in pixels",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets Y offset of center monitor",
          "name": "getCenterOffsetY",
          "parameters": "",
          "returnDocumentation": "Y offset of center monitor in pixels",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the current camera handle, if argument is <i>true</i> then it will also return the main camera when no custom camera is in use",
          "name": "getCurrentCamera",
          "parameters": "[boolean]",
          "returnDocumentation": "camera handle or invalid handle on error",
          "returnType": "camera",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns a vector through screen coordinates x and y. If depth is specified, vector is extended to Depth units into spaceIf normalize is true, vector will be normalized.",
          "name": "getVectorFromCoords",
          "parameters": "[number X=center, number Y=center, number Depth, boolean normalize = false]",
          "returnDocumentation": "Vector, or zero vector on failure",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "If texture is specified, sets current rendering surface to a texture.Otherwise, sets rendering surface back to screen.",
          "name": "setTarget",
          "parameters": "[texture Texture]",
          "returnDocumentation": "True if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets current camera, or resets camera if none specified",
          "name": "setCamera",
          "parameters": "[camera handle Camera]",
          "returnDocumentation": "true if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets 2D drawing color; each color number should be from 0 (darkest) to 255 (brightest)",
          "name": "setColor",
          "parameters": "number Red, number Green, number Blue, [integer Alpha]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the line width for lines. This call might fail if the specified width is not supported by the graphics implementation. Then the width will be the nearest supported value.",
          "name": "setLineWidth",
          "parameters": "[number width=1.0]",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a circle",
          "name": "drawCircle",
          "parameters": "number Radius, number X, number Y, [boolean Filled=true]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws an arc",
          "name": "drawArc",
          "parameters": "number Radius, number X, number Y, number StartAngle, number EndAngle, [boolean Filled=true]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a curve",
          "name": "drawCurve",
          "parameters": "number X, number Y, number Radius",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a line from (x1,y1) to (x2,y2) with the CurrentColor that steadily fades out",
          "name": "drawGradientLine",
          "parameters": "number X1, number Y1, number X2, number Y2",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a line from (x1,y1) to (x2,y2) with CurrentColor",
          "name": "drawLine",
          "parameters": "number X1, number Y1, number X2, number Y2",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets pixel to CurrentColor",
          "name": "drawPixel",
          "parameters": "number X, number Y",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a polygon. May not work properly in hooks other than On Object Render.",
          "name": "drawPolygon",
          "parameters": "texture Texture, [vector Position={0,0,0}, orientation Orientation=nil, number Width=1.0, number Height=1.0]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a rectangle with CurrentColor",
          "name": "drawRectangle",
          "parameters": "number X1, number Y1, number X2, number Y2, [boolean Filled=true]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a sphere with radius Radius at world vector Position. May not work properly in hooks other than On Object Render.",
          "name": "drawSphere",
          "parameters": "[number Radius = 1.0, vector Position]",
          "returnDocumentation": "True if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws the given model with the specified position and orientation - Use with extreme care, may not work properly in all scripting hooks.",
          "name": "drawModel",
          "parameters": "model, position, orientation",
          "returnDocumentation": "Zero if successful, otherwise an integer error code",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws the given model with the specified position and orientation - Use with extreme care, designed to operate properly only in On Object Render hooks.",
          "name": "drawModelOOR",
          "parameters": "model Model, vector Position, matrix Orientation, [number Flags]",
          "returnDocumentation": "Zero if successful, otherwise an integer error code",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the edge positions of targeting brackets for the specified object. The brackets will only be drawn if draw is true or the default value of draw is used. Brackets are drawn with the current color. The brackets will have a padding (distance from the actual bounding box); the default value (used elsewhere in FS2) is 5.",
          "name": "drawTargetingBrackets",
          "parameters": "object Object, [boolean draw=true, int padding=5]",
          "returnDocumentation": "Left, top, right, and bottom positions of the brackets, or nil if invalid",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the edge position of the targeting brackets drawn for a subsystem as if they were drawn on the HUD. Only actually draws the brackets if <i>draw</i> is true, optionally sets the color the as if it was drawn on the HUD",
          "name": "drawSubsystemTargetingBrackets",
          "parameters": "subsystem subsys, [boolean draw=true, boolean setColor=false]",
          "returnDocumentation": "Left, top, right, and bottom positions of the brackets, or nil if invalid or off-screen",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws an off-screen indicator for the given object. The indicator will not be drawn if draw=false, but the coordinates will be returned in either case. The indicator will be drawn using the current color if setColor=true and using the IFF color of the object if setColor=false.",
          "name": "drawOffscreenIndicator",
          "parameters": "object Object, [boolean draw=true, boolean setColor=false]",
          "returnDocumentation": "Coordinates of the indicator (at the very edge of the screen), or nil if object is on-screen",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a string. Use x1/y1 to control position, x2/y2 to limit textbox size.Text will automatically move onto new lines, if x2/y2 is specified.Additionally, calling drawString with only a string argument will automaticallydraw that string below the previously drawn string (or 0,0 if no stringshave been drawn yet",
          "name": "drawString",
          "parameters": "string Message, [number X1, number Y1, number X2, number Y2]",
          "returnDocumentation": "Number of lines drawn, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets string width",
          "name": "getStringWidth",
          "parameters": "string String",
          "returnDocumentation": "String width, or 0 on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays a streaming animation, returning its handle. The optional booleans (except cache) can also be set via the handles virtvars<br>cache is best set to false when loading animations that are only intended to play once, e.g. headz<br>Remember to call the unload() function when you're finished using the animation to free up memory.",
          "name": "loadStreamingAnim",
          "parameters": "string Filename, [boolean loop, boolean reverse, boolean pause, boolean cache]",
          "returnDocumentation": "Streaming animation handle, or invalid handle if animation couldn't be loaded",
          "returnType": "streaminganim",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a texture for rendering to.Types are TEXTURE_STATIC - for infrequent rendering - and TEXTURE_DYNAMIC - for frequent rendering.",
          "name": "createTexture",
          "parameters": "[number Width=512, number Height=512, enumeration Type=TEXTURE_DYNAMIC]",
          "returnDocumentation": "New texture handle, or invalid texture handle if texture couldn't be created",
          "returnType": "texture",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets a handle to a texture. If second argument is set to true, animations will also be loaded.If third argument is set to true, every other animation frame will not be loaded if system has less than 48 MB memory.<br><strong>IMPORTANT:</strong> Textures will not be unload themselves unless you explicitly tell them to do so.When you are done with a texture, call the Unload() function to free up memory.",
          "name": "loadTexture",
          "parameters": "string Filename, [boolean LoadIfAnimation, boolean NoDropFrames]",
          "returnDocumentation": "Texture handle, or invalid texture handle if texture couldn't be loaded",
          "returnType": "texture",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws an image or texture. Any image extension passed will be ignored.The UV variables specify the UV value for each corner of the image. In UV coordinates, (0,0) is the top left of the image; (1,1) is the lower right.",
          "name": "drawImage",
          "parameters": "string Filename/texture Texture, [number X1=0, Y1=0, number X2, number Y2, number UVX1 = 0.0, number UVY1 = 0.0, number UVX2=1.0, number UVY2=1.0, number alpha=1.0]",
          "returnDocumentation": "Whether image was drawn",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a monochrome image using the current color",
          "name": "drawMonochromeImage",
          "parameters": "string Filename/texture Texture, number X1, number Y1, [number X2, number Y2, number alpha=1.0]",
          "returnDocumentation": "Whether image was drawn",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets image width",
          "name": "getImageWidth",
          "parameters": "string Filename",
          "returnDocumentation": "Image width, or 0 if filename is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets image height",
          "name": "getImageHeight",
          "parameters": "Image name",
          "returnDocumentation": "Image height, or 0 if filename is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Flashes the screen",
          "name": "flashScreen",
          "parameters": "number Red, number Green, number Blue",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Loads the model - will not setup subsystem data, DO NOT USE FOR LOADING SHIP MODELS",
          "name": "loadModel",
          "parameters": "string Filename",
          "returnDocumentation": "Handle to a model",
          "returnType": "model",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Specifies if the current viemode has the specified flag, see VM_* enumeration",
          "name": "hasViewmode",
          "parameters": "enumeration",
          "returnDocumentation": "true if flag is present, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the clipping region to the specified rectangle. Most drawing functions are able to handle the offset.",
          "name": "setClip",
          "parameters": "x, y, width, height",
          "returnDocumentation": "true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Resets the clipping region that might have been set",
          "name": "resetClip",
          "parameters": "",
          "returnDocumentation": "true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Opens the movie with the specified name. If the name has an extension it will be removed. This function will try all movie formats supported by the engine and use the first that is found.",
          "name": "openMovie",
          "parameters": "string name, boolean looping = false",
          "returnDocumentation": "The cutscene player handle or invalid handle if cutscene could not be opened.",
          "returnType": "movie_player",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a persistent particle. Persistent variables are handled specially by the engine so that this function can return a handle to the caller. Only use this if you absolutely need it. Use createParticle if the returned handle is not required. Use PARTICLE_* enumerations for type.Reverse reverse animation, if one is specifiedAttached object specifies object that Position will be (and always be) relative to.",
          "name": "createPersistentParticle",
          "parameters": "vector Position, vector Velocity, number Lifetime, number Radius, enumeration Type, [number Tracer length=-1, boolean Reverse=false, texture Texture=Nil, object Attached Object=Nil]",
          "returnDocumentation": "Handle to the created particle",
          "returnType": "particle",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a non-persistent particle. Use PARTICLE_* enumerations for type.Reverse reverse animation, if one is specifiedAttached object specifies object that Position will be (and always be) relative to.",
          "name": "createParticle",
          "parameters": "vector Position, vector Velocity, number Lifetime, number Radius, enumeration Type, [number Tracer length=-1, boolean Reverse=false, texture Texture=Nil, object Attached Object=Nil]",
          "returnDocumentation": "true if particle was created, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Graphics Library",
      "name": "Graphics",
      "shortName": "gr",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "description": "Array of current HookVariable names",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Hookvariable name, or empty string if invalid index specified",
              "returnType": "string",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of HookVariables",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of HookVariables",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Globals",
          "shortName": "",
          "type": "library"
        }
      ],
      "description": "Hook variables repository",
      "name": "HookVariables",
      "shortName": "hv",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Current HUD draw status",
          "getterType": "boolean",
          "name": "HUDDrawn",
          "returnDocumentation": "If the HUD is drawn or not",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Specifies if only the messages gauges of the hud are drawn",
          "getterType": "boolean",
          "name": "HUDDisabledExceptMessages",
          "returnDocumentation": "true if only the message gauges are drawn, false otherwise",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Color used to draw the gauge",
          "name": "setHUDGaugeColor",
          "parameters": "number (index number of the gauge), [number red, number green, number blue, number alpha]",
          "returnDocumentation": "If the operation was successful",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Color used to draw the gauge",
          "name": "getHUDGaugeColor",
          "parameters": "number (index number of the gauge)",
          "returnDocumentation": "Red, green, blue, and alpha of the gauge",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns a handle to a specified HUD gauge",
          "name": "getHUDGaugeHandle",
          "parameters": "string Name",
          "returnDocumentation": "HUD Gauge handle, or nil if invalid",
          "returnType": "HudGauge",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "HUD library",
      "name": "HUD",
      "shortName": "hu",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets a handle of an object from its signature",
          "name": "getObjectFromSignature",
          "parameters": "number Signature",
          "returnDocumentation": "Handle of object with signaure, invalid handle if signature is not in use",
          "returnType": "object",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Runs the defined SEXP script",
          "name": "evaluateSEXP",
          "parameters": "string",
          "returnDocumentation": "if the operation was successful",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Runs the defined SEXP script",
          "name": "runSEXP",
          "parameters": "string",
          "returnDocumentation": "if the operation was successful",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets asteroid",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Asteroid handle, or invalid handle if invalid index specified",
              "returnType": "asteroid",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of asteroids in mission. Note that the value returned is only good until an asteroid is destroyed, and so cannot be relied on for more than one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of asteroids in the mission, or 0 if asteroids are not enabled",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Asteroids in the mission",
          "name": "Asteroids",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of debris in the current mission",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Debris handle, or invalid debris handle if index wasn't valid",
              "returnType": "debris",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of debris pieces in the mission. Note that the value returned is only good until a piece of debris is destroyed, and so cannot be relied on for more than one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Current number of debris particles",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "debris in the mission",
          "name": "Debris",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets escort ship at specified index on escort list",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Specified ship, or invalid ship handle if invalid index",
              "returnType": "ship",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Current number of escort ships",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Current number of escort ships",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "EscortShips",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Indexes events list",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Event handle, or invalid event handle if index was invalid",
              "returnType": "event",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of events in mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of events in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Events",
          "name": "Events",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of SEXP variables. Note that you can set a sexp variable using the array, eg 'SEXPVariables[\"newvariable\"] = \"newvalue\"'",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Handle to SEXP variable, or invalid sexpvariable handle if index was invalid",
              "returnType": "sexpvariable",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Current number of SEXP variables",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Counts number of loaded SEXP Variables. May be slow.",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "SEXP Variables",
          "name": "SEXPVariables",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets ship",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Ship handle, or invalid ship handle if index was invalid",
              "returnType": "ship",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of ships in the mission. This function is somewhat slow, and should be set to a variable for use in looping situations. Note that the value returned is only good until a ship is destroyed, and so cannot be relied on for more than one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of ships in the mission, or 0 if ships haven't been initialized yet",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Ships in the mission",
          "name": "Ships",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of waypoints in the current mission",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Waypoint handle, or invalid waypoint handle if index was invalid",
              "returnType": "waypoint",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Gets number of waypoints in mission. Note that this is only accurate for one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of waypoints in the mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Waypoints",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of waypoint lists",
              "name": "__indexer",
              "parameters": "number Index/string WaypointListName",
              "returnDocumentation": "Gets waypointlist handle",
              "returnType": "waypointlist",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of waypoint lists in mission. Note that this is only accurate for one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of waypoint lists in the mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "WaypointLists",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets handle to a weapon object in the mission.",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Weapon handle, or invalid weapon handle if index is invalid",
              "returnType": "weapon",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of weapon objects in mission. Note that this is only accurate for one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of weapon objects in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Weapons",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets handle to a beam object in the mission.",
              "name": "__indexer",
              "parameters": "number Index",
              "returnDocumentation": "Beam handle, or invalid beam handle if index is invalid",
              "returnType": "beam",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of beam objects in mission. Note that this is only accurate for one frame.",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of beam objects in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Beams",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Wings in the mission",
              "name": "__indexer",
              "parameters": "number Index/string WingName",
              "returnDocumentation": "Wing handle, or invalid wing handle if index or name was invalid",
              "returnType": "wing",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of wings in mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of wings in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Wings",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Teams in the mission",
              "name": "__indexer",
              "parameters": "number Index/string TeamName",
              "returnDocumentation": "Team handle or invalid team handle if the requested team could not be found",
              "returnType": "team",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of teams in mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of teams in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Teams",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Messages of the mission",
              "name": "__indexer",
              "parameters": "number Index/string messageName",
              "returnDocumentation": "Message handle or invalid handle on error",
              "returnType": "message",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of messages in the mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of messages in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Messages",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Built-in messages of the mission",
              "name": "__indexer",
              "parameters": "number Index/string messageName",
              "returnDocumentation": "Message handle or invalid handle on error",
              "returnType": "message",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of built-in messages in the mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of messages in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "BuiltinMessages",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Personas of the mission",
              "name": "__indexer",
              "parameters": "number Index/string name",
              "returnDocumentation": "Persona handle or invalid handle on error",
              "returnType": "persona",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of personas in the mission",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of messages in mission",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "Personas",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [],
          "description": "Adds a message",
          "name": "addMessage",
          "parameters": "string name, string text[, persona persona]",
          "returnDocumentation": "The new message or invalid handle on error",
          "returnType": "message",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sends a message from the given source (not from a ship!) with the given priority or optionally sends it from the missions command source.<br>If delay is specified the message will be delayed by the specified time in seconds<br>If you pass <i>nil</i> as the sender then the message will not have a sender.",
          "name": "sendMessage",
          "parameters": "string sender, message message[, number delay=0.0[, enumeration priority = MESSAGE_PRIORITY_NORMAL[, boolean fromCommand = false]]]",
          "returnDocumentation": "true if successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sends a training message to the player. <i>time</i> is the amount in seconds to display the message, only whole seconds are used!",
          "name": "sendTrainingMessage",
          "parameters": "message message, number time[, number delay=0.0]",
          "returnDocumentation": "true if successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a ship and returns a handle to it using the specified name, class, world orientation, and world position",
          "name": "createShip",
          "parameters": "[string Name, shipclass Class=Shipclass[1], orientation Orientation=null, vector Position={0,0,0}]",
          "returnDocumentation": "Ship handle, or invalid ship handle if ship couldn't be created",
          "returnType": "ship",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a waypoint",
          "name": "createWaypoint",
          "parameters": "[vector Position, waypointlist List]",
          "returnDocumentation": "Waypoint handle, or invalid waypoint handle if waypoint couldn't be created",
          "returnType": "waypoint",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a weapon and returns a handle to it. 'Group' is used for lighting grouping purposes; for example, quad lasers would only need to act as one light source.",
          "name": "createWeapon",
          "parameters": "[weaponclass Class=WeaponClass[1], orientation Orientation=null, world vector Position={0,0,0}, object Parent = nil, number Group = -1",
          "returnDocumentation": "Weapon handle, or invalid weapon handle if weapon couldn't be created.",
          "returnType": "weapon",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets mission filename",
          "name": "getMissionFilename",
          "parameters": "",
          "returnDocumentation": "Mission filename, or empty string if game is not in a mission",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Starts the defined mission",
          "name": "startMission",
          "parameters": "[Filename or MISSION_* enumeration, Briefing = true]",
          "returnDocumentation": "True, or false if the function fails",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Game time in seconds since the mission was started; is affected by time compression",
          "name": "getMissionTime",
          "parameters": "",
          "returnDocumentation": "Mission time (seconds), or 0 if game is not in a mission",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Loads a mission",
          "name": "loadMission",
          "parameters": "Mission name",
          "returnDocumentation": "True if mission was loaded, otherwise false",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Stops the current mission and unloads it",
          "name": "unloadMission",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Simulates mission frame",
          "name": "simulateFrame",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Renders mission frame, but does not move anything",
          "name": "renderFrame",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Applies a shudder effects to the camera. Time is in seconds. Intensity specifies the shudder effect strength, the Maxim has a value of 1440.",
          "name": "applyShudder",
          "parameters": "number time, number intesity",
          "returnDocumentation": "true if successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get whether or not the current mission being played in a campaign (as opposed to the tech room's simulator)",
          "name": "isInCampaign",
          "parameters": "",
          "returnDocumentation": "true if in campaign, false if not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the title of the current mission",
          "name": "getMissionTitle",
          "parameters": "",
          "returnDocumentation": "The mission title or an empty string if currently not in mission",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Adds a background bitmap to the mission with the specified parameters.",
          "name": "addBackgroundBitmap",
          "parameters": "string name, orientation orientation = identity, float scaleX = 1.0, scale_y = 1.0, int div_x = 1.0, int div_y = 1.0",
          "returnDocumentation": "A handle to the background element, or invalid handle if the function failed.",
          "returnType": "background_element",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Adds a sun bitmap to the mission with the specified parameters.",
          "name": "addSunBitmap",
          "parameters": "string name, orientation orientation = identity, float scaleX = 1.0, scale_y = 1.0",
          "returnDocumentation": "A handle to the background element, or invalid handle if the function failed.",
          "returnType": "background_element",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Removes the background element specified by the handle. The handle must have been returned by either addBackgroundBitmap or addBackgroundSun. This handle will be invalidated by this function.",
          "name": "removeBackgroundElement",
          "parameters": "background_element el",
          "returnDocumentation": "true if successful",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets a handle of a Lua SEXP",
              "name": "__indexer",
              "parameters": "string Name",
              "returnDocumentation": "Lua SEXP handle or invalid handle on error",
              "returnType": "LuaSEXP",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "Lua SEXPs",
          "name": "LuaSEXPs",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [],
          "description": "Get the list of yet to arrive ships for this mission",
          "name": "getArrivalList",
          "parameters": "",
          "returnDocumentation": "An iterator across all the yet to arrive ships. Can be used in a for .. in loop",
          "returnType": "iterator[parse_object]",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Mission library",
      "name": "Mission",
      "shortName": "mn",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The available options.",
          "getterType": {
            "element": "option",
            "type": "list"
          },
          "name": "Options",
          "returnDocumentation": "A table of all the options.",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Persist any changes made to the options system. Options can be incapable of applying changes immediately in which case they are returned here.",
          "name": "persistChanges",
          "parameters": "",
          "returnDocumentation": "The options that did not support changing their value",
          "returnType": {
            "element": "option",
            "type": "list"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Discard any changes made to the options system.",
          "name": "discardChanges",
          "parameters": "",
          "returnDocumentation": "True on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Options library",
      "name": "Options",
      "shortName": "opt",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Reads the text of the given file into the parsing system. If a directory is given then the file is read from that location.",
          "name": "readFileText",
          "parameters": "string file, string directory = <any>",
          "returnDocumentation": "true if the operation was successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Stops parsing and frees any allocated resources.",
          "name": "stop",
          "parameters": "",
          "returnDocumentation": "true if the operation was successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Displays a message dialog which includes the current file name and line number. If <i>error</i> is set the message will be displayed as an error.",
          "name": "displayMessage",
          "parameters": "string message, boolean error = false",
          "returnDocumentation": "true if the operation was successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Require that a string appears at the current position.",
          "name": "requiredString",
          "parameters": "string token",
          "returnDocumentation": "true if the operation was successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Check if the string appears at the current position in the file.",
          "name": "optionalString",
          "parameters": "string token",
          "returnDocumentation": "true if the token is present, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets a single line of text from the file",
          "name": "getString",
          "parameters": "",
          "returnDocumentation": "Text or nil on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets a floating point number from the file",
          "name": "getFloat",
          "parameters": "",
          "returnDocumentation": "number or nil on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets an integer number from the file",
          "name": "getInt",
          "parameters": "",
          "returnDocumentation": "number or nil on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets a boolean value from the file",
          "name": "getBoolean",
          "parameters": "",
          "returnDocumentation": "boolean value or nil on error",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Engine parsing library",
      "name": "Parsing",
      "shortName": "parse",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [
            {
              "children": [],
              "description": "Array of ship classes",
              "name": "__indexer",
              "parameters": "number Index/string Name",
              "returnDocumentation": "Ship handle, or invalid ship handle if index is invalid",
              "returnType": "shipclass",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of ship classes",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of ship classes, or 0 if ship classes haven't been loaded yet",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "ShipClasses",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Array of weapon classes",
              "name": "__indexer",
              "parameters": "number Index/string WeaponName",
              "returnDocumentation": "Weapon class handle, or invalid weaponclass handle if index is invalid",
              "returnType": "weapon",
              "shortName": "",
              "type": "operator"
            },
            {
              "children": [],
              "description": "Number of weapon classes",
              "name": "__len",
              "parameters": "",
              "returnDocumentation": "Number of weapon classes, or 0 if weapon classes haven't been loaded yet",
              "returnType": "number",
              "shortName": "",
              "type": "operator"
            }
          ],
          "description": "",
          "name": "WeaponClasses",
          "shortName": "",
          "type": "library"
        }
      ],
      "description": "Tables library",
      "name": "Tables",
      "shortName": "tb",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Test the AVD Physics code",
          "name": "avdTest",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Creates a particle. Use PARTICLE_* enumerations for type.Reverse reverse animation, if one is specifiedAttached object specifies object that Position will be (and always be) relative to.",
          "name": "createParticle",
          "parameters": "vector Position, vector Velocity, number Lifetime, number Radius, enumeration Type, [number Tracer length=-1, boolean Reverse=false, texture Texture=Nil, object Attached Object=Nil]",
          "returnDocumentation": "Handle to the created particle",
          "returnType": "particle",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Generates an ADE stackdump",
          "name": "getStack",
          "parameters": "",
          "returnDocumentation": "Current Lua stack",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns whether current player is a multiplayer pilot or not.",
          "name": "isCurrentPlayerMulti",
          "parameters": "",
          "returnDocumentation": "Whether current player is a multiplayer pilot or not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns whether PXO is currently enabled in the configuration.",
          "name": "isPXOEnabled",
          "parameters": "",
          "returnDocumentation": "Whether PXO is enabled or not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Forces a cutscene by the specified filename string to play. Should really only be used in a non-gameplay state (i.e. start of GS_STATE_BRIEFING) otherwise odd side effects may occur. Highly Experimental.",
          "name": "playCutscene",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Experimental or testing stuff",
      "name": "Testing",
      "shortName": "ts",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the current real-time timestamp.",
          "name": "getCurrentTime",
          "parameters": "",
          "returnDocumentation": "The current time",
          "returnType": "timestamp",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Real-Time library",
      "name": "Time",
      "shortName": "time",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "This function is similar to the standard library string.sub but this can operate on UTF-8 encoded unicode strings. This function will respect the unicode mode setting of the current mod so you can use it even if you don't use Unicode strings.",
          "name": "sub",
          "parameters": "string arg, number start[, number end = -1]",
          "returnDocumentation": "The requestd substring",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines the number of codepoints in the given string. This respects the unicode mode setting of the mod.",
          "name": "len",
          "parameters": "string arg",
          "returnDocumentation": "The number of code points in the string.",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Functions for handling UTF-8 encoded unicode strings",
      "name": "Unicode",
      "shortName": "utf8",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Sets the offset from the top left corner at which <b>all</b> rocket contexts will be rendered",
          "name": "setOffset",
          "parameters": "number x, number y",
          "returnDocumentation": "true if the operation was successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Enables input for the specified libRocket context",
          "name": "enableInput",
          "parameters": "Rocket::Context context",
          "returnDocumentation": "true if successfull",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Disables UI input",
          "name": "disableInput",
          "parameters": "",
          "returnDocumentation": "true if successfull",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Plays an element specific sound with an optional state for differentiating different UI states.",
          "name": "playElementSound",
          "parameters": "Rocket::Element element, string event, string state = ",
          "returnDocumentation": "true if a sound was played, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Gets the maximum number of possible pilots.",
              "getterType": "number",
              "name": "MAX_PILOTS",
              "returnDocumentation": "The maximum number of pilots",
              "setterType": "",
              "shortName": "",
              "type": "property"
            },
            {
              "children": [],
              "description": "The amount of warnings caused by the mod while loading.",
              "getterType": "number",
              "name": "WarningCount",
              "returnDocumentation": "The maximum number of pilots",
              "setterType": "",
              "shortName": "",
              "type": "property"
            },
            {
              "children": [],
              "description": "The amount of errors caused by the mod while loading.",
              "getterType": "number",
              "name": "ErrorCount",
              "returnDocumentation": "The maximum number of pilots",
              "setterType": "",
              "shortName": "",
              "type": "property"
            },
            {
              "children": [],
              "description": "Lists all pilots available for the pilot selection<br>",
              "name": "enumeratePilots",
              "parameters": "",
              "returnDocumentation": "A table containing the pilots (without a file extension) or nil on error",
              "returnType": {
                "element": "string",
                "type": "list"
              },
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Reads the last active pilot from the config file and returns some information about it. callsign is the name of the player and is_multi indicates whether the pilot was last active as a multiplayer pilot.",
              "name": "getLastPilot",
              "parameters": "",
              "returnDocumentation": "The pilot name or nil if there was no last pilot",
              "returnType": "string",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Checks if the pilot with the specified callsign has the right language.",
              "name": "checkPilotLanguage",
              "parameters": "string callsign",
              "returnDocumentation": "true if pilot is valid, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Selects the pilot with the specified callsign and advances the game to the main menu.",
              "name": "selectPilot",
              "parameters": "string callsign, boolean is_multi",
              "returnDocumentation": "nothing",
              "returnType": "void",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Deletes the pilot with the specified callsign. This is not reversible!",
              "name": "deletePilot",
              "parameters": "string callsign",
              "returnDocumentation": "true on success, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Creates a new pilot in either single or multiplayer mode and optionally copies settings from an existing pilot.",
              "name": "createPilot",
              "parameters": "string callsign, boolean is_multi[, string copy_from]",
              "returnDocumentation": "true on success, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Determines if the pilot selection screen should automatically select the default user.",
              "name": "isAutoselect",
              "parameters": "",
              "returnDocumentation": "true if autoselect is enabled, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            }
          ],
          "description": "API for accessing values specific to the pilot select screen.<br><b>Warning:</b> This is an internal API for the new UI system. This should not be used by other code and may be removed in the future!",
          "name": "PilotSelect",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Starts the ambient mainhall sound.",
              "name": "startAmbientSound",
              "parameters": "",
              "returnDocumentation": "nothing",
              "returnType": "void",
              "shortName": "",
              "type": "function"
            }
          ],
          "description": "API for accessing values specific to the main hall screen.<br><b>Warning:</b> This is an internal API for the new UI system. This should not be used by other code and may be removed in the future!",
          "name": "MainHall",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Lists the names of the available pilot images.",
              "name": "listPilotImages",
              "parameters": "",
              "returnDocumentation": "The list of pilot filenames or nil on error",
              "returnType": {
                "element": "string",
                "type": "list"
              },
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Lists the names of the available squad images.",
              "name": "listSquadImages",
              "parameters": "",
              "returnDocumentation": "The list of squad filenames or nil on error",
              "returnType": {
                "element": "string",
                "type": "list"
              },
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Accept the given player as the current player",
              "name": "acceptPilot",
              "parameters": "player selection",
              "returnDocumentation": "true on sucess, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            }
          ],
          "description": "API for accessing values specific to the barracks screen.<br><b>Warning:</b> This is an internal API for the new UI system. This should not be used by other code and may be removed in the future!",
          "name": "Barracks",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Plays the example voice clip used for checking the voice volume",
              "name": "playVoiceClip",
              "parameters": "",
              "returnDocumentation": "true on sucess, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            }
          ],
          "description": "API for accessing values specific to the options screen.<br><b>Warning:</b> This is an internal API for the new UI system. This should not be used by other code and may be removed in the future!",
          "name": "OptionsMenu",
          "shortName": "",
          "type": "library"
        },
        {
          "children": [
            {
              "children": [],
              "description": "Loads the list of available campaigns",
              "name": "loadCampaignList",
              "parameters": "",
              "returnDocumentation": "false if something failed while loading the list, true otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Get the campaign name and description lists",
              "name": "getCampaignList",
              "parameters": "",
              "returnDocumentation": "Three tables with the names, file names, and descriptions of the campaigns",
              "returnType": {
                "elements": [
                  {
                    "element": "string",
                    "type": "list"
                  },
                  {
                    "element": "string",
                    "type": "list"
                  },
                  {
                    "element": "string",
                    "type": "list"
                  }
                ],
                "type": "tuple"
              },
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Selects the specified campaign file name",
              "name": "selectCampaign",
              "parameters": "string campaign_file",
              "returnDocumentation": "true if successful, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            },
            {
              "children": [],
              "description": "Resets the campaign with the specified file name",
              "name": "resetCampaign",
              "parameters": "string campaign_file",
              "returnDocumentation": "true if successful, false otherwise",
              "returnType": "boolean",
              "shortName": "",
              "type": "function"
            }
          ],
          "description": "API for accessing data related to the campaign UI.<br><b>Warning:</b> This is an internal API for the new UI system. This should not be used by other code and may be removed in the future!",
          "name": "CampaignMenu",
          "shortName": "",
          "type": "library"
        }
      ],
      "description": "Functions for managing the \"scpui\" user interface system.",
      "name": "UserInterface",
      "shortName": "ui",
      "type": "library"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Asteroid target object; may be object derivative, such as ship.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Target object, or invalid handle if asteroid handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Kills the asteroid. Set \"killer\" to designate a specific ship as having been the killer, and \"hitpos\" to specify the world position of the hit location; if nil, the asteroid center is used.",
          "name": "kill",
          "parameters": "[ship killer=nil, wvector hitpos=nil]",
          "returnDocumentation": "True if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Asteroid handle",
      "name": "asteroid",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Determines if this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if not.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Background element handle",
      "name": "background_element",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Weapon's class",
          "getterType": "weaponclass",
          "name": "Class",
          "returnDocumentation": "Weapon class, or invalid weaponclass handle if beam handle is invalid",
          "setterType": "weaponclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "End point of the beam",
          "getterType": "vector",
          "name": "LastShot",
          "returnDocumentation": "vector or null vector if beam handle is not valid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Start point of the beam",
          "getterType": "vector",
          "name": "LastStart",
          "returnDocumentation": "vector or null vector if beam handle is not valid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Target of beam. Value may also be a deriviative of the 'object' class, such as 'ship'.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Beam target, or invalid object handle if beam handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem that beam is targeting.",
          "getterType": "subsystem",
          "name": "TargetSubsystem",
          "returnDocumentation": "Target subsystem, or invalid subsystem handle if beam handle is invalid",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Parent of the beam.",
          "getterType": "object",
          "name": "ParentShip",
          "returnDocumentation": "Beam parent, or invalid object handle if beam handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem that beam is fired from.",
          "getterType": "subsystem",
          "name": "ParentSubsystem",
          "returnDocumentation": "Parent subsystem, or invalid subsystem handle if beam handle is invalid",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Get the number of collisions in frame.",
          "name": "getCollisionCount",
          "parameters": "",
          "returnDocumentation": "Number of beam collisions",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the position of the defined collision.",
          "name": "getCollisionPosition",
          "parameters": "number",
          "returnDocumentation": "World vector",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the collision information of the specified collision",
          "name": "getCollisionInformation",
          "parameters": "number",
          "returnDocumentation": "handle to information or invalid handle on error",
          "returnType": "collision_info",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the target of the defined collision.",
          "name": "getCollisionObject",
          "parameters": "number",
          "returnDocumentation": "Object the beam collided with",
          "returnType": "object",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the defined collision was exit collision.",
          "name": "isExitCollision",
          "parameters": "number",
          "returnDocumentation": "True if the collision was exit collision, false if entry, nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the start information about the direction. The vector is a normalized vector from LastStart showing the start direction of a slashing beam",
          "name": "getStartDirectionInfo",
          "parameters": "",
          "returnDocumentation": "The start direction or null vector if invalid",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the end information about the direction. The vector is a normalized vector from LastStart showing the end direction of a slashing beam",
          "name": "getEndDirectionInfo",
          "parameters": "",
          "returnDocumentation": "The start direction or null vector if invalid",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Beam handle",
      "name": "beam",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Camera name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Camera name, or an empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "True if valid, false or nil if not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "New camera name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Camera name",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New camera FOV (in radians)",
          "getterType": "number",
          "name": "FOV",
          "returnDocumentation": "Camera FOV (in radians)",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New camera orientation",
          "getterType": "orientation",
          "name": "Orientation",
          "returnDocumentation": "Camera orientation",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New camera position",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "Camera position",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New mount object",
          "getterType": "object",
          "name": "Self",
          "returnDocumentation": "Camera object",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New mount object subsystem",
          "getterType": "subsystem",
          "name": "SelfSubsystem",
          "returnDocumentation": "Subsystem that the camera is mounted on",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New target object",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Camera target object",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "New target subsystem",
          "getterType": "subsystem",
          "name": "TargetSubsystem",
          "returnDocumentation": "Subsystem that the camera is pointed at",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Sets camera FOV<br>FOV is the final field of view, in radians, of the camera.<br>Zoom Time is the total time to take zooming in or out.<br>Acceleration Time is the total time it should take the camera to get up to full zoom speed.<br>Deceleration Time is the total time it should take the camera to slow down from full zoom speed.",
          "name": "setFOV",
          "parameters": "[number FOV, number Zoom Time, number Zoom Acceleration Time, number Zoom deceleration Time]",
          "returnDocumentation": "true if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets camera orientation and velocity data.<br>Orientation is the final orientation for the camera, after it has finished moving. If not specified, the camera will simply stop at its current orientation.<br>Rotation time (seconds) is how long total, including acceleration, the camera should take to rotate. If it is not specified, the camera will jump to the specified orientation.<br>Acceleration time (seconds) is how long it should take the camera to get 'up to speed'. If not specified, the camera will instantly start moving.<br>Deceleration time (seconds) is how long it should take the camera to slow down. If not specified, the camera will instantly stop moving.",
          "name": "setOrientation",
          "parameters": "[world orientation Orientation, number Rotation Time, number Acceleration Time, number Deceleration time]",
          "returnDocumentation": "true if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets camera position and velocity data.<br>Position is the final position for the camera. If not specified, the camera will simply stop at its current position.<br>Translation time (seconds) is how long total, including acceleration, the camera should take to move. If it is not specified, the camera will jump to the specified position.<br>Acceleration time (seconds) is how long it should take the camera to get 'up to speed'. If not specified, the camera will instantly start moving.<br>Deceleration time (seconds) is how long it should take the camera to slow down. If not specified, the camera will instantly stop moving.",
          "name": "setPosition",
          "parameters": "[wvector Position, number Translation Time, number Acceleration Time, number Deceleration Time]",
          "returnDocumentation": "true if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Camera handle",
      "name": "camera",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of cockpit displays for this ship class",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "number of cockpit displays or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns the handle at the requested index or the handle with the specified name",
          "name": "__indexer",
          "parameters": "number/string",
          "returnDocumentation": "display handle or invalid handle on error",
          "returnType": "display_info",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otehrwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Array of cockpit display information",
      "name": "cockpitdisplays",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The model this collision info is about",
          "getterType": "model",
          "name": "Model",
          "returnDocumentation": "The model",
          "setterType": "model",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The distance to the closest collision point",
          "name": "getCollisionDistance",
          "parameters": "",
          "returnDocumentation": "distance or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "The collision point of this information (local to the object if boolean is set to <i>true</i>)",
          "name": "getCollisionPoint",
          "parameters": "[boolean local]",
          "returnDocumentation": "The collision point or nil of none",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "The collision normal of this information (local to object if boolean is set to <i>true</i>)",
          "name": "getCollisionNormal",
          "parameters": "[boolean local]",
          "returnDocumentation": "The collision normal or nil of none",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects if this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Information about a collision",
      "name": "collision_info",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Pitch of the player ship",
          "getterType": "number",
          "name": "Pitch",
          "returnDocumentation": "Pitch",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Heading of the player ship",
          "getterType": "number",
          "name": "Heading",
          "returnDocumentation": "Heading",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Bank of the player ship",
          "getterType": "number",
          "name": "Bank",
          "returnDocumentation": "Bank",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Vertical control of the player ship",
          "getterType": "number",
          "name": "Vertical",
          "returnDocumentation": "Vertical control",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Sideways control of the player ship",
          "getterType": "number",
          "name": "Sideways",
          "returnDocumentation": "Sideways control",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Forward control of the player ship",
          "getterType": "number",
          "name": "Forward",
          "returnDocumentation": "Forward",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Forward control of the player ship",
          "getterType": "number",
          "name": "ForwardCruise",
          "returnDocumentation": "Forward",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Number of primary weapons that will fire",
          "getterType": "number",
          "name": "PrimaryCount",
          "returnDocumentation": "Number of weapons to fire, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Number of secondary weapons that will fire",
          "getterType": "number",
          "name": "SecondaryCount",
          "returnDocumentation": "Number of weapons to fire, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Number of countermeasures that will launch",
          "getterType": "number",
          "name": "CountermeasureCount",
          "returnDocumentation": "Number of countermeasures to launch, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Clears the lua button control info",
          "name": "clearLuaButtonInfo",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Access the four bitfields containing the button info",
          "name": "getButtonInfo",
          "parameters": "",
          "returnDocumentation": "Four bitfields",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Access the four bitfields containing the button info",
          "name": "accessButtonInfo",
          "parameters": "number, number, number, number",
          "returnDocumentation": "Four bitfields",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Adds the defined button control to lua button control data, if number is -1 it tries to use the string",
          "name": "useButtonControl",
          "parameters": "number, string",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gives the name of the command corresponding with the given number",
          "name": "getButtonControlName",
          "parameters": "number",
          "returnDocumentation": "Name of the command",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gives the number of the command corresponding with the given string",
          "name": "getButtonControlNumber",
          "parameters": "string",
          "returnDocumentation": "Number of the command",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Toggles the all button polling for lua",
          "getterType": "boolean",
          "name": "AllButtonPolling",
          "returnDocumentation": "If the all button polling is enabled or not",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Access the four bitfields containing the button info",
          "name": "pollAllButtons",
          "parameters": "",
          "returnDocumentation": "Four bitfields",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "control info handle",
      "name": "control_info",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Whether or not debris is a piece of hull",
          "getterType": "boolean",
          "name": "IsHull",
          "returnDocumentation": "Whether debris is a hull fragment, or false if handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The shipclass of the ship this debris originates from",
          "getterType": "shipclass",
          "name": "OriginClass",
          "returnDocumentation": "The shipclass of the ship that created this debris",
          "setterType": "shipclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The radius of this debris piece",
          "name": "getDebrisRadius",
          "parameters": "",
          "returnDocumentation": "The radius of this debris piece or -1 if invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return if this debris handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Debris handle",
      "name": "debris",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Starts rendering to this cockpit display. That means if you get a valid texture handle from this function then the rendering system is ready to do a render to texture. If setClip is true then the clipping region will be set to the region of the cockpit display.<br><b>Important:</b> You have to call stopRendering after you're done or this render target will never be released!",
          "name": "startRendering",
          "parameters": "[boolean setClip = true]",
          "returnDocumentation": "texture handle that is being drawn to or invalid handle on error",
          "returnType": "texture",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Stops rendering to this cockpit display",
          "name": "stopRendering",
          "parameters": "",
          "returnDocumentation": "true if successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the background texture handle of this cockpit display",
          "name": "getBackgroundTexture",
          "parameters": "",
          "returnDocumentation": "texture handle or invalid handle if no background texture or an error happened",
          "returnType": "texture",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the foreground texture handle of this cockpit display<br><b>Important:</b> If you want to do render to texture then you have to use startRendering/stopRendering",
          "name": "getForegroundTexture",
          "parameters": "",
          "returnDocumentation": "texture handle or invalid handle if no foreground texture or an error happened",
          "returnType": "texture",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the size of this cockpit display",
          "name": "getSize",
          "parameters": "",
          "returnDocumentation": "Width and height of the display or -1, -1 on error",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the offset of this cockpit display",
          "name": "getOffset",
          "parameters": "",
          "returnDocumentation": "x and y offset of the display or -1, -1 on error",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether this handle is valid or not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Cockpit display handle",
      "name": "display",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the name of this cockpit display as defined in ships.tbl",
          "name": "getName",
          "parameters": "",
          "returnDocumentation": "Name string or empty string on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the file name of the target texture of this cockpit display",
          "name": "getFileName",
          "parameters": "",
          "returnDocumentation": "Texture name string or empty string on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the file name of the foreground texture of this cockpit display",
          "name": "getForegroundFileName",
          "parameters": "",
          "returnDocumentation": "Foreground texture name string or nil if texture is not set or on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the file name of the background texture of this cockpit display",
          "name": "getBackgroundFileName",
          "parameters": "",
          "returnDocumentation": "Background texture name string or nil if texture is not set or on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the size of this cockpit display",
          "name": "getSize",
          "parameters": "",
          "returnDocumentation": "Width and height of the display or -1, -1 on error",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the offset of this cockpit display",
          "name": "getOffset",
          "parameters": "",
          "returnDocumentation": "x and y offset of the display or -1, -1 on error",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship cockpit display information handle",
      "name": "display_info",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the number of cockpit displays for the player ship",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "number of displays or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Gets a cockpit display from the present player displays by either the index or the name of the display",
          "name": "__indexer",
          "parameters": "number/string",
          "returnDocumentation": "Display handle or invalid handle on error",
          "returnType": "display",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether this handle is valid or not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Player cockpit displays array handle",
      "name": "displays",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the number of docking points in this bay",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "The number of docking points or 0 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Gets the name of this docking bay",
          "name": "getName",
          "parameters": "",
          "returnDocumentation": "The name or an empty string on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the location of a docking point in this bay",
          "name": "getPoint",
          "parameters": "number index",
          "returnDocumentation": "The local location or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the normal of a docking point in this bay",
          "name": "getNormal",
          "parameters": "number index",
          "returnDocumentation": "The normal vector or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Computes the final position and orientation of a docker bay that docks with this bay.",
          "name": "computeDocker",
          "parameters": "dockingbay",
          "returnDocumentation": "The local location and orientation of the docker vessel in the reference to the vessel of the docking bay handle, or a nil value on error",
          "returnType": {
            "elements": [
              "vector",
              "orientation"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether is valid or not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "<i>true</i> if valid, <i>false</i> otherwise",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to a model docking bay",
      "name": "dockingbay",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets a dockingbay handle from this model. If a string is given then a dockingbay with that name is searched.",
          "name": "__indexer",
          "parameters": "dockingbay",
          "returnDocumentation": "Handle or invalid handle on error",
          "returnType": "dockingbay",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Retrieves the number of dockingbays on this model",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "number of docking bays or 0 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        }
      ],
      "description": "The docking bays of a model",
      "name": "dockingbays",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Sets enumeration to specified value (if it is not a global",
          "name": "__newindex",
          "parameters": "enumeration",
          "returnDocumentation": "enumeration",
          "returnType": "enumeration",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns enumeration name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Enumeration name, or \"<INVALID>\" if invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Compares the two enumerations for equality",
          "name": "__eq",
          "parameters": "enumeration",
          "returnDocumentation": "true if equal, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        }
      ],
      "description": "Enumeration object",
      "name": "enumeration",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Mission event name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Directive text",
          "getterType": "string",
          "name": "DirectiveText",
          "returnDocumentation": "",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Raw directive keypress text, as seen in FRED.",
          "getterType": "string",
          "name": "DirectiveKeypressText",
          "returnDocumentation": "",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Time for event to repeat (in seconds)",
          "getterType": "number",
          "name": "Interval",
          "returnDocumentation": "Repeat time, or 0 if invalid handle",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Number of objects left for event",
          "getterType": "number",
          "name": "ObjectCount",
          "returnDocumentation": "Repeat count, or 0 if invalid handle",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Event repeat count",
          "getterType": "number",
          "name": "RepeatCount",
          "returnDocumentation": "Repeat count, or 0 if invalid handle",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Event score",
          "getterType": "number",
          "name": "Score",
          "returnDocumentation": "Event score, or 0 if invalid handle",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Mission event handle",
      "name": "event",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Eyepoint normal",
          "getterType": "vector",
          "name": "Normal",
          "returnDocumentation": "Eyepoint normal, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Eyepoint location (Local vector)",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "Eyepoint location, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detect whether this handle is valid",
          "name": "IsValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Eyepoint handle",
      "name": "eyepoint",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the number of eyepoints on this model",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of eyepoints on this model or 0 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Gets en eyepoint handle",
          "name": "__indexer",
          "parameters": "eyepoint",
          "returnDocumentation": "eye handle or invalid handle on error",
          "returnType": "eyepoint",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid or not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Array of model eye points",
      "name": "eyepoints",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Instantly closes file and invalidates all file handles",
          "name": "close",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Flushes file buffer to disk.",
          "name": "flush",
          "parameters": "",
          "returnDocumentation": "True for success, false on failure",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines path of the given file",
          "name": "getPath",
          "parameters": "",
          "returnDocumentation": "Path string of the file handle, or an empty string if it doesn't have one, or the handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Reads part of or all of a file, depending on arguments passed. Based on basic Lua file:read function.Returns nil when the end of the file is reached.<br><ul><li>\"*n\" - Reads a number.</li><li>\"*a\" - Reads the rest of the file and returns it as a string.</li><li>\"*l\" - Reads a line. Skips the end of line markers.</li><li>(number) - Reads given number of characters, then returns them as a string.</li></ul>",
          "name": "read",
          "parameters": "number|string, ...",
          "returnDocumentation": "Requested data, or nil if the function fails",
          "returnType": {
            "elements": [
              "number|string",
              "..."
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Changes position of file, or gets location.Whence can be:<li>\"set\" - File start.</li><li>\"cur\" - Current position in file.</li><li>\"end\" - File end.</li></ul>",
          "name": "seek",
          "parameters": "[string Whence=\"cur\", number Offset=0]",
          "returnDocumentation": "new offset, or false or nil on failure",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Writes a series of Lua strings or numbers to the current file.",
          "name": "write",
          "parameters": "string or number, ...",
          "returnDocumentation": "Number of items successfully written.",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "File handle",
      "name": "file",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Name of font",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Font filename, or an empty string if the handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Name of font (including extension)<br><b>Important:</b>This variable is deprecated. Use <i>Name</i> instead.",
          "getterType": "string",
          "name": "Filename",
          "returnDocumentation": "",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Name of font (including extension)",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Height of font (in pixels)",
          "getterType": "number",
          "name": "Height",
          "returnDocumentation": "Font height, or 0 if the handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The offset this font has from the baseline of textdrawing downwards. (in pixels)",
          "getterType": "number",
          "name": "TopOffset",
          "returnDocumentation": "Font top offset, or 0 if the handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The space (in pixels) this font skips downwards after drawing a line of text",
          "getterType": "number",
          "name": "BottomOffset",
          "returnDocumentation": "Font bottom offset, or 0 if the handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "True if valid, false or nil if not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "Detects whether handle is valid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "font handle",
      "name": "font",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Game event name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Game event name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Game event name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Game event name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Game event",
      "name": "gameevent",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Game state name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Game state name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Game state name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Game state name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Game state",
      "name": "gamestate",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The (local) vector to the position of the glowpoint",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "The local vector to the glowpoint or nil invalid",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The radius of the glowpoint",
          "getterType": "number",
          "name": "Radius",
          "returnDocumentation": "The radius of the glowpoint or -1 of invalid",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns wether this handle is valid or not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "True if handle is valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "A model glowpoint",
      "name": "glowpoint",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Custom HUD Gauge name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Custom HUD Gauge name, or nil if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Custom HUD Gauge text",
          "getterType": "string",
          "name": "Text",
          "returnDocumentation": "Custom HUD Gauge text, or nil if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "For scripted HUD gauges, the function that will be called for rendering the HUD gauge",
          "getterType": "function (HudGaugeDrawFunctions gauge_handle)",
          "name": "RenderFunction",
          "returnDocumentation": "Render function or nil if no action is set or handle is invalid",
          "setterType": "function (HudGaugeDrawFunctions gauge_handle)",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "HUD Gauge handle",
      "name": "HudGauge",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Draws a string in the context of the HUD gauge.",
          "name": "drawString",
          "parameters": "string text, number x, number y",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a line in the context of the HUD gauge.",
          "name": "drawLine",
          "parameters": "number X1, number Y1, number X2, number Y2",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a circle in the context of the HUD gauge.",
          "name": "drawCircle",
          "parameters": "number radius, number X, number Y, [boolean filled=true]",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws a rectangle in the context of the HUD gauge.",
          "name": "drawRectangle",
          "parameters": "number X1, number Y1, number X2, number Y2, [boolean Filled=true]",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws an image in the context of the HUD gauge.",
          "name": "drawImage",
          "parameters": "texture handle Texture, [number X=0, Y=0]",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to the rendering functions used for HUD gauges. Do not keep a reference to this since these are only useful inside the rendering callback of a HUD gauge.",
      "name": "HudGaugeDrawFunctions",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The action of this SEXP",
          "getterType": "function",
          "name": "Action",
          "returnDocumentation": "The action function or nil on error",
          "setterType": "function action",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Lua SEXP handle",
      "name": "LuaSEXP",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The name of the message as specified in the mission file",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "The name or an empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The unaltered text of the message, see getMessage() for options to replace variables<br><b>NOTE:</b> Changing the text will also change the text for messages not yet played but already in the message queue!",
          "getterType": "string",
          "name": "Message",
          "returnDocumentation": "The message or an empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The voice file of the message",
          "getterType": "soundfile",
          "name": "VoiceFile",
          "returnDocumentation": "The voice file handle or invalid handle when not present",
          "setterType": "soundfile",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The persona of the message",
          "getterType": "persona",
          "name": "Persona",
          "returnDocumentation": "The persona handle or invalid handle if not present",
          "setterType": "persona",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets the text of the message and optionally replaces SEXP variables with their respective values.",
          "name": "getMessage",
          "parameters": "[boolean replaceVars = true]",
          "returnDocumentation": "The message or an empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the message handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to a mission message",
      "name": "message",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Model textures",
          "getterType": "modeltextures_h",
          "name": "Textures",
          "returnDocumentation": "Model textures, or an invalid modeltextures handle if the model handle is invalid",
          "setterType": "modeltextures_h",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model thrusters",
          "getterType": "thrusters",
          "name": "Thrusters",
          "returnDocumentation": "Thrusters of the model or invalid handle",
          "setterType": "thrusters",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model eyepoints",
          "getterType": "eyepoints",
          "name": "Eyepoints",
          "returnDocumentation": "Array of eyepoints or invalid handle on error",
          "setterType": "eyepoints",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Docking bays handle of model",
          "getterType": "dockingbays",
          "name": "Dockingbays",
          "returnDocumentation": "Array of docking bays on this model, or invalid handle on error",
          "setterType": "dockingbays",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model bounding box maximum",
          "getterType": "vector",
          "name": "BoundingBoxMax",
          "returnDocumentation": "Model bounding box, or an empty vector if the handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model bounding box minimum",
          "getterType": "vector",
          "name": "BoundingBoxMin",
          "returnDocumentation": "Model bounding box, or an empty vector if the handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model filename",
          "getterType": "string",
          "name": "Filename",
          "returnDocumentation": "Model filename, or an empty string if the handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model mass",
          "getterType": "number",
          "name": "Mass",
          "returnDocumentation": "Model mass, or 0 if the model handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model moment of inertia",
          "getterType": "orientation",
          "name": "MomentOfInertia",
          "returnDocumentation": "Moment of Inertia matrix or identity matrix if invalid",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model radius (Used for collision & culling detection)",
          "getterType": "number",
          "name": "Radius",
          "returnDocumentation": "Model Radius or 0 if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "True if valid, false or nil if not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "Detects whether handle is valid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "3D Model (POF) handle",
      "name": "model",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the number of points in this path",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "The number of points or 0 on error",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Determines if the handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "True if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the point in the path with the specified index",
          "name": "__indexer",
          "parameters": "number",
          "returnDocumentation": "The point or invalid handle if index is invalid",
          "returnType": "modelpathpoint",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "The name of this model path",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "The name or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Path of a model",
      "name": "modelpath",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Determines if the handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "True if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "The current, global position of this path point.",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "The current position of the point.",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The radius of the path point.",
          "getterType": "number",
          "name": "Radius",
          "returnDocumentation": "The radius of the point.",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Point in a model path",
      "name": "modelpathpoint",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of textures on model",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of model textures",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "number Index/string TextureName",
          "name": "__indexer",
          "parameters": "texture",
          "returnDocumentation": "Model textures, or invalid modeltextures handle if model handle is invalid",
          "returnType": "texture",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Array of materials",
      "name": "modeltextures_h",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Determines the width in pixels of this movie <b>Read-only</b>",
          "getterType": "number",
          "name": "Width",
          "returnDocumentation": "The width of the movie or -1 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines the height in pixels of this movie <b>Read-only</b>",
          "getterType": "number",
          "name": "Height",
          "returnDocumentation": "The height of the movie or -1 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines the frames per second of this movie <b>Read-only</b>",
          "getterType": "number",
          "name": "FPS",
          "returnDocumentation": "The FPS of the movie or -1 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Updates the current state of the movie and moves the internal timer forward by the specified time span.",
          "name": "update",
          "parameters": "timespan step_time",
          "returnDocumentation": "true if there is more to display, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines if the player is ready to display the movie. Since the movie frames are loaded asynchronously there is a short delay between the creation of a player and when it is possible to start displaying the movie. This function can be used to determine if playback is possible at the moment.",
          "name": "isPlaybackReady",
          "parameters": "",
          "returnDocumentation": "true if playback is ready, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws the current frame of the movie at the specified coordinates.",
          "name": "drawMovie",
          "parameters": "number x1, number y1[, number x2, number y2]",
          "returnDocumentation": "Returns nothing",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Explicitly stops playback. This function should be called when the player isn't needed anymore to free up some resources.",
          "name": "stop",
          "parameters": "",
          "returnDocumentation": "Returns nothing",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines if this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "A movie player instance",
      "name": "movie_player",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Checks whether two object handles are for the same object",
          "name": "__eq",
          "parameters": "object, object",
          "returnDocumentation": "True if equal, false if not or a handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns name of object (if any)",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Object name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Parent of the object. Value may also be a deriviative of the 'object' class, such as 'ship'.",
          "getterType": "object",
          "name": "Parent",
          "returnDocumentation": "Parent handle, or invalid handle if object is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object world position (World vector)",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "World position, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object world position as of last frame (World vector)",
          "getterType": "vector",
          "name": "LastPosition",
          "returnDocumentation": "World position, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object world orientation (World orientation)",
          "getterType": "orientation",
          "name": "Orientation",
          "returnDocumentation": "Orientation, or null orientation if handle is invalid",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object world orientation as of last frame (World orientation)",
          "getterType": "orientation",
          "name": "LastOrientation",
          "returnDocumentation": "Orientation, or null orientation if handle is invalid",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Physics data used to move ship between frames",
          "getterType": "physics",
          "name": "Physics",
          "returnDocumentation": "Physics data, or invalid physics handle if object handle is invalid",
          "setterType": "physics",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Hitpoints an object has left",
          "getterType": "number",
          "name": "HitpointsLeft",
          "returnDocumentation": "Hitpoints left, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Shields",
          "getterType": "shields",
          "name": "Shields",
          "returnDocumentation": "Shields handle, or invalid shields handle if object handle is invalid",
          "setterType": "shields",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets the object's unique signature",
          "name": "getSignature",
          "parameters": "",
          "returnDocumentation": "Returns the object's unique numeric signature, or -1 if invalid.  Useful for creating a metadata system",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if handle is valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets object type",
          "name": "getBreedName",
          "parameters": "",
          "returnDocumentation": "Object type name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Collision group data",
          "getterType": "number",
          "name": "CollisionGroups",
          "returnDocumentation": "Current collision group signature. NOTE: This is a bitfield, NOT a normal number.",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns the objects' current fvec.",
          "name": "getfvec",
          "parameters": "[boolean normalize]",
          "returnDocumentation": "Objects' forward vector, or nil if invalid. If called with a true argument, vector will be normalized.",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the objects' current uvec.",
          "name": "getuvec",
          "parameters": "[boolean normalize]",
          "returnDocumentation": "Objects' up vector, or nil if invalid. If called with a true argument, vector will be normalized.",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the objects' current rvec.",
          "name": "getrvec",
          "parameters": "[boolean normalize]",
          "returnDocumentation": "Objects' rvec, or nil if invalid. If called with a true argument, vector will be normalized.",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks the collisions between the polygons of the current object and a ray. Start and end vectors are in world coordinates",
          "name": "checkRayCollision",
          "parameters": "vector Start Point, vector End Point[, boolean Local=false]",
          "returnDocumentation": "World collision point (local if boolean is set to true) and the specific collsision info, nil if no collisions",
          "returnType": {
            "elements": [
              "vector",
              "collision_info"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Registers a callback on this object which is called every time <i>before</i> the physics rules are applied to the object. The callback is attached to this specific object and will not be called anymore once the object is deleted. The parameter of the function is the object that is being moved.",
          "name": "addPreMoveHook",
          "parameters": "function(object) callback",
          "returnDocumentation": "Returns nothing.",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Registers a callback on this object which is called every time <i>after</i> the physics rules are applied to the object. The callback is attached to this specific object and will not be called anymore once the object is deleted. The parameter of the function is the object that is being moved.",
          "name": "addPostMoveHook",
          "parameters": "function(object) callback",
          "returnDocumentation": "Returns nothing.",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Object handle",
      "name": "object",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The title of this option (read-only)",
          "getterType": "string",
          "name": "Title",
          "returnDocumentation": "The title or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The description of this option (read-only)",
          "getterType": "string",
          "name": "Description",
          "returnDocumentation": "The description or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The configuration key of this option. This will be a unique string. (read-only)",
          "getterType": "string",
          "name": "Key",
          "returnDocumentation": "The key or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The category of this option. (read-only)",
          "getterType": "string",
          "name": "Category",
          "returnDocumentation": "The category or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The type of this option. One of the OPTION_TYPE_* values. (read-only)",
          "getterType": "enumeration",
          "name": "Type",
          "returnDocumentation": "The enum or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The current value of this option.",
          "getterType": "ValueDescription",
          "name": "Value",
          "returnDocumentation": "The current value or nil on error",
          "setterType": "ValueDescription",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Contains a list mapping a flag name to its value. Possible names are:<ul><li><b>ForceMultiValueSelection:</b> If true, a selection option with two values should be displayed the same as an option with more possible values</li></ul>",
          "getterType": "{string->boolean...}",
          "name": "Flags",
          "returnDocumentation": "The table of flags values.",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets a value from an option range. The specified value must be between 0 and 1.",
          "name": "getValueFromRange",
          "parameters": "number interpolant",
          "returnDocumentation": "The value at the specifiedposition",
          "returnType": "ValueDescription",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "From a value description of this option, determines the range value.",
          "name": "getInterpolantFromValue",
          "parameters": "ValueDescription value",
          "returnDocumentation": "The range value or 0 on error.",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the valid values of this option. The order or the returned values must be maintained in the UI. This is only valid for selection or boolean options.",
          "name": "getValidValues",
          "parameters": "",
          "returnDocumentation": "A table containing the possible values or nil on error.",
          "returnType": {
            "element": "ValueDescription",
            "type": "list"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Immediately persists any changes made to this specific option.",
          "name": "persistChanges",
          "parameters": "",
          "returnDocumentation": "true if the change was applied successfully, false otherwise. nil on error.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Option handle",
      "name": "option",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Priority of the given order",
          "getterType": "number",
          "name": "Priority",
          "returnDocumentation": "Order priority or 0 if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Removes the given order from the ship's priority queue.",
          "name": "remove",
          "parameters": "",
          "returnDocumentation": "True if order was successfully removed, otherwise false or nil.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the type of the order.",
          "name": "getType",
          "parameters": "",
          "returnDocumentation": "The type of the order as one of the ORDER_* enumerations.",
          "returnType": "enumeration",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Target of the order. Value may also be a deriviative of the 'object' class, such as 'ship'.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Target object or invalid object handle if order handle is invalid or order requires no target.",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Target subsystem of the order.",
          "getterType": "subsystem",
          "name": "TargetSubsystem",
          "returnDocumentation": "Target subsystem, or invalid subsystem handle if order handle is invalid or order requires no subsystem target.",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "order handle",
      "name": "order",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Orientation component - pitch, bank, heading, or index into 3x3 matrix (1-9)",
          "name": "__indexer",
          "parameters": "p,b,h or 1-9",
          "returnDocumentation": "Number at the specified index, or 0 if index is invalid.",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Multiplies two matrix objects)",
          "name": "__mul",
          "parameters": "orientation",
          "returnDocumentation": "matrix, or empty matrix if unsuccessful",
          "returnType": "orientation",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Converts a matrix to a string with format \"[r1c1 r2c1 r3c1 | r1c2 r2c2 r3c2| r1c3 r2c3 r3c3]\"",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Formatted string or \"<NULL\"",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns orientation that has been interpolated to Final by Factor (0.0-1.0)",
          "name": "getInterpolated",
          "parameters": "orientation Final, number Factor",
          "returnDocumentation": "Interpolated orientation, or null orientation on failure",
          "returnType": "orientation",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns a transpose version of the specified orientation",
          "name": "getTranspose",
          "parameters": "",
          "returnDocumentation": "Transpose matrix, or null orientation on failure",
          "returnType": "orientation",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns rotated version of given vector",
          "name": "rotateVector",
          "parameters": "vector Input",
          "returnDocumentation": "Rotated vector, or empty vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns unrotated version of given vector",
          "name": "unrotateVector",
          "parameters": "vector Input",
          "returnDocumentation": "Unrotated vector, or empty vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the vector that points up (0,1,0 unrotated by this matrix)",
          "name": "getUvec",
          "parameters": "",
          "returnDocumentation": "Vector or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the vector that points to the front (0,0,1 unrotated by this matrix)",
          "name": "getFvec",
          "parameters": "",
          "returnDocumentation": "Vector or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the vector that points to the right (1,0,0 unrotated by this matrix)",
          "name": "getRvec",
          "parameters": "",
          "returnDocumentation": "Vector or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Orientation matrix object",
      "name": "orientation",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The name of the object. If possible, don't set the name but set the display name instead.",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "The name or empty string on error",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The display name of the object. If the name should be shown to the user, use this since it can be translated.",
          "getterType": "string",
          "name": "DisplayName",
          "returnDocumentation": "The display name or empty string on error",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The position at which the object will arrive.",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "The position of the object.",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The orientation of the object.",
          "getterType": "matrix",
          "name": "Orientation",
          "returnDocumentation": "The orientation",
          "setterType": "matrix",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The ship class of the object.",
          "getterType": "shipclass",
          "name": "ShipClass",
          "returnDocumentation": "The ship class",
          "setterType": "shipclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The initial hull percentage of this object.",
          "getterType": "number",
          "name": "InitialHull",
          "returnDocumentation": "The initial hull",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The initial shields percentage of this object.",
          "getterType": "number",
          "name": "InitialShields",
          "returnDocumentation": "The initial shields",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets the \"subsystem\" status of the ship itself. This is a special subsystem that represents the primary and secondary weapons and the AI class.",
          "getterType": "parse_subsystem",
          "name": "MainStatus",
          "returnDocumentation": "The subsystem handle or invalid handle if there were no changes to the main status",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Get the list of subsystems of this parse object",
          "getterType": {
            "element": "parse_subsystem",
            "type": "list"
          },
          "name": "Subsystems",
          "returnDocumentation": "An array of the parse subsystems of this object",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines if this parse object is a player start.",
          "name": "isPlayerStart",
          "parameters": "",
          "returnDocumentation": "true if player start, false if not or if invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to a parse object",
      "name": "parse_object",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The name of the subsystem. If possible, don't set the name but set the display name instead.",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "The name or empty string on error",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The percentage to what the subsystem is damage",
          "getterType": "number",
          "name": "Damage",
          "returnDocumentation": "The percentage or negative on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The overridden primary banks",
          "getterType": {
            "element": "weaponclass",
            "type": "list"
          },
          "name": "PrimaryBanks",
          "returnDocumentation": "The primary bank weapons or nil if not changed from default",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The overridden primary ammunition, as a percentage of the default",
          "getterType": {
            "element": "weaponclass",
            "type": "list"
          },
          "name": "PrimaryAmmo",
          "returnDocumentation": "The primary bank ammunition percantage or nil if not changed from default",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The overridden secondary banks",
          "getterType": {
            "element": "weaponclass",
            "type": "list"
          },
          "name": "SecondaryBanks",
          "returnDocumentation": "The secondary bank weapons or nil if not changed from default",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The overridden secondary ammunition, as a percentage of the default",
          "getterType": {
            "element": "weaponclass",
            "type": "list"
          },
          "name": "SecondaryAmmo",
          "returnDocumentation": "The secondary bank ammunition percantage or nil if not changed from default",
          "setterType": "",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "Handle to a parse subsystem",
      "name": "parse_subsystem",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The current position of the particle (world vector)",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "The current position",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The current velocity of the particle (world vector)",
          "getterType": "vector",
          "name": "Velocity",
          "returnDocumentation": "The current velocity",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The time this particle already lives",
          "getterType": "number",
          "name": "Age",
          "returnDocumentation": "The current age or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The time this particle can live",
          "getterType": "number",
          "name": "MaximumLife",
          "returnDocumentation": "The maximal life or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The looping status of the particle. If a particle loops then it will not be removed when its max_life value has been reached. Instead its animation will be reset to the start. When the particle should finally be removed then set this to false and set MaxLife to 0.",
          "getterType": "boolean",
          "name": "Looping",
          "returnDocumentation": "The looping status",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The radius of the particle",
          "getterType": "number",
          "name": "Radius",
          "returnDocumentation": "The radius or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The tracer legth of the particle",
          "getterType": "number",
          "name": "TracerLength",
          "returnDocumentation": "The radius or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The object this particle is attached to. If valid the position will be relativ to this object and the velocity will be ignored.",
          "getterType": "object",
          "name": "AttachedObject",
          "returnDocumentation": "Attached object or invalid object handle on error",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false if not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to a particle",
      "name": "particle",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The name of the persona",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "The name or empty string on error",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detect if the handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Persona handle",
      "name": "persona",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Afterburner acceleration time",
          "getterType": "number",
          "name": "AfterburnerAccelerationTime",
          "returnDocumentation": "Afterburner acceleration time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Afterburner max velocity (Local vector)",
          "getterType": "vector",
          "name": "AfterburnerVelocityMax",
          "returnDocumentation": "Afterburner max velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Banking constant",
          "getterType": "number",
          "name": "BankingConstant",
          "returnDocumentation": "Banking constant, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Forward acceleration time",
          "getterType": "number",
          "name": "ForwardAccelerationTime",
          "returnDocumentation": "Forward acceleration time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Forward deceleration time",
          "getterType": "number",
          "name": "ForwardDecelerationTime",
          "returnDocumentation": "Forward decleration time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Forward thrust amount (0-1), used primarily for thruster graphics",
          "getterType": "number",
          "name": "ForwardThrust",
          "returnDocumentation": "Forward thrust, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object mass",
          "getterType": "number",
          "name": "Mass",
          "returnDocumentation": "Object mass, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Rotational velocity (Local vector)",
          "getterType": "vector",
          "name": "RotationalVelocity",
          "returnDocumentation": "Rotational velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Rotational damping, ie derivative of rotational speed",
          "getterType": "number",
          "name": "RotationalVelocityDamping",
          "returnDocumentation": "Rotational damping, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Desired rotational velocity",
          "getterType": "vector",
          "name": "RotationalVelocityDesired",
          "returnDocumentation": "Desired rotational velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Maximum rotational velocity (Local vector)",
          "getterType": "vector",
          "name": "RotationalVelocityMax",
          "returnDocumentation": "Maximum rotational velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "How much shaking from shockwaves is applied to object",
          "getterType": "number",
          "name": "ShockwaveShakeAmplitude",
          "returnDocumentation": "Shockwave shake amplitude, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Side thrust amount (0-1), used primarily for thruster graphics",
          "getterType": "number",
          "name": "SideThrust",
          "returnDocumentation": "Side thrust amount, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Time to accelerate to maximum slide velocity",
          "getterType": "number",
          "name": "SlideAccelerationTime",
          "returnDocumentation": "Sliding acceleration time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Time to decelerate from maximum slide speed",
          "getterType": "number",
          "name": "SlideDecelerationTime",
          "returnDocumentation": "Sliding deceleration time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object world velocity (World vector)",
          "getterType": "vector",
          "name": "Velocity",
          "returnDocumentation": "Object velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Desired velocity (World vector)",
          "getterType": "vector",
          "name": "VelocityDesired",
          "returnDocumentation": "Desired velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object max local velocity (Local vector)",
          "getterType": "vector",
          "name": "VelocityMax",
          "returnDocumentation": "Maximum velocity, or null vector if handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Vertical thrust amount (0-1), used primarily for thruster graphics",
          "getterType": "number",
          "name": "VerticalThrust",
          "returnDocumentation": "Vertical thrust amount, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Specifies if the afterburner is active or not",
          "getterType": "boolean",
          "name": "AfterburnerActive",
          "returnDocumentation": "true if afterburner is active false otherwise",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "True if valid, false or nil if not",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "Detects whether handle is valid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets total speed as of last frame",
          "name": "getSpeed",
          "parameters": "",
          "returnDocumentation": "Total speed, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets total speed in the ship's 'forward' direction as of last frame",
          "name": "getForwardSpeed",
          "parameters": "",
          "returnDocumentation": "Total forward speed, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "True if Afterburners are on, false or nil if not",
          "name": "isAfterburnerActive",
          "parameters": "",
          "returnDocumentation": "Detects whether afterburner is active",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "True if glide mode is on, false or nil if not",
          "name": "isGliding",
          "parameters": "",
          "returnDocumentation": "Detects if ship is gliding",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Applies a whack to an object at a position (a local vector) based on impulse supplied (a world vector). If no position is supplied, an empty vector is used.",
          "name": "applyWhack",
          "parameters": "vector Impulse, [ vector Position]",
          "returnDocumentation": "true if it succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Physics handle",
      "name": "physics",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The scoring stats of this player (read-only)",
          "getterType": "scoring_stats",
          "name": "Stats",
          "returnDocumentation": "The player stats or invalid handle",
          "setterType": "scoring_stats stats",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The image filename of this pilot",
          "getterType": "string",
          "name": "ImageFilename",
          "returnDocumentation": "Player image filename, or empty string if handle is invalid",
          "setterType": "string name",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The singleplayer squad filename of this pilot",
          "getterType": "string",
          "name": "SingleSquadFilename",
          "returnDocumentation": "singleplayer squad image filename, or empty string if handle is invalid",
          "setterType": "string name",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The multiplayer squad filename of this pilot",
          "getterType": "string",
          "name": "MultiSquadFilename",
          "returnDocumentation": "Multiplayer squad image filename, or empty string if handle is invalid",
          "setterType": "string name",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines if this player is currently configured for multiplayer.",
          "getterType": "boolean",
          "name": "IsMultiplayer",
          "returnDocumentation": "true if this is a multiplayer pilot, false otherwise or if the handle is invalid",
          "setterType": "boolean value",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines if this player is currently configured for multiplayer.",
          "getterType": "boolean",
          "name": "WasMultiplayer",
          "returnDocumentation": "true if this is a multiplayer pilot, false otherwise or if the handle is invalid",
          "setterType": "boolean value",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current player name",
          "name": "getName",
          "parameters": "",
          "returnDocumentation": "Player name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current player campaign filename",
          "name": "getCampaignFilename",
          "parameters": "",
          "returnDocumentation": "Campaign name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current player image filename",
          "name": "getImageFilename",
          "parameters": "",
          "returnDocumentation": "Player image filename, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets player's current main hall name",
          "name": "getMainHallName",
          "parameters": "",
          "returnDocumentation": "Main hall name, or name of first mainhall in campaign if something goes wrong",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets player's current main hall number",
          "name": "getMainHallIndex",
          "parameters": "",
          "returnDocumentation": "Main hall index, or index of first mainhall in campaign if something goes wrong",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current player squad name",
          "name": "getSquadronName",
          "parameters": "",
          "returnDocumentation": "Squadron name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets current player multi squad name",
          "name": "getMultiSquadronName",
          "parameters": "",
          "returnDocumentation": "Squadron name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Loads the specified campaign save file.",
          "name": "loadCampaignSavefile",
          "parameters": "string campaign = <current>",
          "returnDocumentation": "true on success, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Player handle",
      "name": "player",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "When the called on promise resolves, this function will be called with the resolved value of the promise.",
          "name": "continueWith",
          "parameters": "function(args...)",
          "returnDocumentation": "A promise that will resolve with the return value of the passed function.",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "When the called on promise produces an error, this function will be called with the error value of the promise.",
          "name": "catch",
          "parameters": "function(args...)",
          "returnDocumentation": "A promise that will resolve with the return value of the passed function.",
          "returnType": "promise",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the promise is already resolved.",
          "name": "isResolved",
          "parameters": "",
          "returnDocumentation": "true if resolved, false if result is still pending.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the promise is already in an error state.",
          "name": "isErrored",
          "parameters": "",
          "returnDocumentation": "true if errored, false if result is still pending.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the resolved value of this promise. Causes an error when used on an unresolved or errored promise!",
          "name": "getValue",
          "parameters": "",
          "returnDocumentation": "The resolved values.",
          "returnType": "unknown",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the error value of this promise. Causes an error when used on an unresolved or resolved promise!",
          "name": "getErrorValue",
          "parameters": "",
          "returnDocumentation": "The error values.",
          "returnType": "unknown",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "A promise that represents an operation that will return a value at some point in the future",
      "name": "promise",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The current score.",
          "getterType": "number",
          "name": "Score",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of primary shots that have been fired.",
          "getterType": "number",
          "name": "PrimaryShotsFired",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of primary shots that have hit.",
          "getterType": "number",
          "name": "PrimaryShotsHit",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of primary friendly fire hits.",
          "getterType": "number",
          "name": "PrimaryFriendlyHit",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of secondary shots that have been fired.",
          "getterType": "number",
          "name": "SecondaryShotsFired",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of secondary shots that have hit.",
          "getterType": "number",
          "name": "SecondaryShotsHit",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The number of secondary friendly fire hits.",
          "getterType": "number",
          "name": "SecondaryFriendlyHit",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The total number of kills.",
          "getterType": "number",
          "name": "TotalKills",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The total number of assists.",
          "getterType": "number",
          "name": "Assists",
          "returnDocumentation": "The score value",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns the number of kills of a specific ship class recorded in this statistics structure.",
          "name": "getShipclassKills",
          "parameters": "shipclass class",
          "returnDocumentation": "The kills for that specific ship class",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Player related scoring stats.",
      "name": "scoring_stats",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "SEXP Variable persistance, uses SEXPVAR_*_PERSISTENT enumerations",
          "getterType": "enumeration",
          "name": "Persistence",
          "returnDocumentation": "SEXPVAR_*_PERSISTENT enumeration, or invalid numeration if handle is invalid",
          "setterType": "enumeration",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "SEXP Variable type, uses SEXPVAR_TYPE_* enumerations",
          "getterType": "enumeration",
          "name": "Type",
          "returnDocumentation": "SEXPVAR_TYPE_* enumeration, or invalid numeration if handle is invalid",
          "setterType": "enumeration",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "SEXP variable value",
          "getterType": "string",
          "name": "Value",
          "returnDocumentation": "SEXP variable contents, or nil if the variable is of an invalid type or the handle is invalid",
          "setterType": "number/string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns SEXP name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "SEXP name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Deletes a SEXP Variable",
          "name": "delete",
          "parameters": "",
          "returnDocumentation": "True if successful, false if the handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "SEXP Variable handle",
      "name": "sexpvariable",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of shield segments",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of shield segments or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Gets or sets shield segment strength. Use \"SHIELD_*\" enumerations (for standard 4-quadrant shields) or index of a specific segment, or NONE for the entire shield",
          "name": "__indexer",
          "parameters": "enumeration/number",
          "returnDocumentation": "Segment/shield strength, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Total shield hitpoints left (for all segments combined)",
          "getterType": "number",
          "name": "CombinedLeft",
          "returnDocumentation": "Combined shield strength, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Maximum shield hitpoints (for all segments combined)",
          "getterType": "number",
          "name": "CombinedMax",
          "returnDocumentation": "Combined maximum shield strength, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Shields handle",
      "name": "shields",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Array of ship subsystems",
          "name": "__indexer",
          "parameters": "string Name/number Index",
          "returnDocumentation": "Subsystem handle, or invalid subsystem handle if index or ship handle is invalid",
          "returnType": "subsystem",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Number of subsystems on ship",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Subsystem number, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Current Armor class of the ships' shield",
          "getterType": "string",
          "name": "ShieldArmorClass",
          "returnDocumentation": "Armor class name, or empty string if none is set",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Current Armor class",
          "getterType": "string",
          "name": "ArmorClass",
          "returnDocumentation": "Armor class name, or empty string if none is set",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship name. This is the actual name of the ship. Use <i>getDisplayString</i> to get the string which should be displayed to the player.",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Ship name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship display name",
          "getterType": "string",
          "name": "DisplayName",
          "returnDocumentation": "The display name of the ship or empty if there is no display string",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Afterburner fuel left",
          "getterType": "number",
          "name": "AfterburnerFuelLeft",
          "returnDocumentation": "Afterburner fuel left, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Afterburner fuel capacity",
          "getterType": "number",
          "name": "AfterburnerFuelMax",
          "returnDocumentation": "Afterburner fuel capacity, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class",
          "getterType": "shipclass",
          "name": "Class",
          "returnDocumentation": "Ship class, or invalid shipclass handle if ship handle is invalid",
          "setterType": "shipclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Number of countermeasures left",
          "getterType": "number",
          "name": "CountermeasuresLeft",
          "returnDocumentation": "Countermeasures left, or 0 if ship handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "An array of the cockpit displays on this ship.<br>NOTE: Only the ship of the player has these",
          "getterType": "displays",
          "name": "CockpitDisplays",
          "returnDocumentation": "displays handle or invalid handle on error",
          "setterType": "displays",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class mounted on this ship's countermeasure point",
          "getterType": "weaponclass",
          "name": "CountermeasureClass",
          "returnDocumentation": "Countermeasure hardpoint weapon class, or invalid weaponclass handle if no countermeasure class or ship handle is invalid",
          "setterType": "weaponclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Total hitpoints",
          "getterType": "number",
          "name": "HitpointsMax",
          "returnDocumentation": "Ship maximum hitpoints, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Current weapon energy reserves",
          "getterType": "number",
          "name": "WeaponEnergyLeft",
          "returnDocumentation": "Ship current weapon energy reserve level, or 0 if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Maximum weapon energy",
          "getterType": "number",
          "name": "WeaponEnergyMax",
          "returnDocumentation": "Ship maximum weapon energy reserve level, or 0 if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "FOV of ship's autoaim, if any",
          "getterType": "number",
          "name": "AutoaimFOV",
          "returnDocumentation": "FOV (in degrees), or 0 if ship uses no autoaim or if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Determines if primary trigger is pressed or not",
          "getterType": "boolean",
          "name": "PrimaryTriggerDown",
          "returnDocumentation": "True if pressed, false if not, nil if ship handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Array of primary weapon banks",
          "getterType": "weaponbanktype",
          "name": "PrimaryBanks",
          "returnDocumentation": "Primary weapon banks, or invalid weaponbanktype handle if ship handle is invalid",
          "setterType": "weaponbanktype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Array of secondary weapon banks",
          "getterType": "weaponbanktype",
          "name": "SecondaryBanks",
          "returnDocumentation": "Secondary weapon banks, or invalid weaponbanktype handle if ship handle is invalid",
          "setterType": "weaponbanktype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Array of tertiary weapon banks",
          "getterType": "weaponbanktype",
          "name": "TertiaryBanks",
          "returnDocumentation": "Tertiary weapon banks, or invalid weaponbanktype handle if ship handle is invalid",
          "setterType": "weaponbanktype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Target of ship. Value may also be a deriviative of the 'object' class, such as 'ship'.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Target object, or invalid object handle if no target or ship handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Target subsystem of ship.",
          "getterType": "subsystem",
          "name": "TargetSubsystem",
          "returnDocumentation": "Target subsystem, or invalid subsystem handle if no target or ship handle is invalid",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship's team",
          "getterType": "team",
          "name": "Team",
          "returnDocumentation": "Ship team, or invalid team handle if ship handle is invalid",
          "setterType": "team",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets ship textures",
          "getterType": "shiptextures",
          "name": "Textures",
          "returnDocumentation": "Ship textures, or invalid shiptextures handle if ship handle is invalid",
          "setterType": "shiptextures",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Checks for the \"affected-by-gravity\" flag",
          "getterType": "boolean",
          "name": "FlagAffectedByGravity",
          "returnDocumentation": "True if flag is set, false if flag is not set and nil on error",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The disabled state of this ship",
          "getterType": "boolean",
          "name": "Disabled",
          "returnDocumentation": "true if ship is diabled, false otherwise",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Stealth status of this ship",
          "getterType": "boolean",
          "name": "Stealthed",
          "returnDocumentation": "true if stealthed, false otherwise or on error",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Hidden from sensors status of this ship",
          "getterType": "boolean",
          "name": "HiddenFromSensors",
          "returnDocumentation": "true if invisible to hidden from sensors, false otherwise or on error",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Specifies whether this ship is currently gliding or not.",
          "getterType": "boolean",
          "name": "Gliding",
          "returnDocumentation": "true if gliding, false otherwise or in case of error",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "(SET not implemented, see EtsSetIndexes)",
          "getterType": "number",
          "name": "EtsEngineIndex",
          "returnDocumentation": "Ships ETS Engine index value, 0 to MAX_ENERGY_INDEX",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "(SET not implemented, see EtsSetIndexes)",
          "getterType": "number",
          "name": "EtsShieldIndex",
          "returnDocumentation": "Ships ETS Shield index value, 0 to MAX_ENERGY_INDEX",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "(SET not implemented, see EtsSetIndexes)",
          "getterType": "number",
          "name": "EtsWeaponIndex",
          "returnDocumentation": "Ships ETS Weapon index value, 0 to MAX_ENERGY_INDEX",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Array of ship orders",
          "getterType": "shiporders",
          "name": "Orders",
          "returnDocumentation": "Ship orders, or invalid handle if ship handle is invalid",
          "setterType": "shiporders",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Kills the ship. Set \"Killer\" to the ship you are killing to self-destruct",
          "name": "kill",
          "parameters": "[object Killer]",
          "returnDocumentation": "True if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Activates an effect for this ship. Effect names are defined in Post_processing.tbl, and need to be implemented in the main shader. This functions analogous to the ship-effect sexp. NOTE: only one effect can be active at any time, adding new effects will override effects already in progress.\n",
          "name": "addShipEffect",
          "parameters": "string name, int duration (in milliseconds)",
          "returnDocumentation": "Returns true if the effect was successfully added, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the ship explosion event has already happened",
          "name": "hasShipExploded",
          "parameters": "",
          "returnDocumentation": "Returns 1 if first explosion timestamp is passed, 2 if second is passed, 0 otherwise",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Launches a countermeasure from the ship",
          "name": "fireCountermeasure",
          "parameters": "",
          "returnDocumentation": "Whether countermeasure was launched or not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Fires ship primary bank(s)",
          "name": "firePrimary",
          "parameters": "",
          "returnDocumentation": "Number of primary banks fired",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Fires ship secondary bank(s)",
          "name": "fireSecondary",
          "parameters": "",
          "returnDocumentation": "Number of secondary banks fired",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets time that animation will be done",
          "name": "getAnimationDoneTime",
          "parameters": "number Type, number Subtype",
          "returnDocumentation": "Time (seconds), or 0 if ship handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Clears a ship's orders list",
          "name": "clearOrders",
          "parameters": "",
          "returnDocumentation": "True if successful, otherwise false or nil",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Uses the goal code to execute orders",
          "name": "giveOrder",
          "parameters": "enumeration Order, [object Target=nil, subsystem TargetSubsystem=nil, number Priority=1.0, shipclass TargetShipclass=nil]",
          "returnDocumentation": "True if order was given, otherwise false or nil",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets ship maneuver over the defined time period",
          "name": "doManeuver",
          "parameters": "number Duration, number Heading, number Pitch, number Bank, boolean Apply-all Rotation, number Vertical, number Sideways, number Forward, boolean Apply-all Movement, number Maneuver Bitfield",
          "returnDocumentation": "True if maneuver order was given, otherwise false or nil",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Triggers an animation. Type is the string name of the animation type, Subtype is the subtype number, such as weapon bank #, Forwards and Instant are boolean, defaulting to true & false respectively.<br><strong>IMPORTANT: Function is in testing and should not be used with official mod releases</strong>",
          "name": "triggerAnimation",
          "parameters": "string Type, [number Subtype, boolean Forwards, boolean Instant]",
          "returnDocumentation": "True if successful, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Warps ship in",
          "name": "warpIn",
          "parameters": "",
          "returnDocumentation": "True if successful, or nil if ship handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Warps ship out",
          "name": "warpOut",
          "parameters": "",
          "returnDocumentation": "True if successful, or nil if ship handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks whether ship has a working subspace drive, is allowed to use it, and is not disabled or limited by subsystem strength.",
          "name": "canWarp",
          "parameters": "",
          "returnDocumentation": "True if successful, or nil if ship handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks whether ship has a bay departure location and if its mother ship is present.",
          "name": "canBayDepart",
          "parameters": "",
          "returnDocumentation": "True if successful, or nil if ship handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if ship is warping in",
          "name": "isWarpingIn",
          "parameters": "",
          "returnDocumentation": "True if the ship is warping in, false or nil otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the current emp effect strength acting on the object",
          "name": "getEMP",
          "parameters": "",
          "returnDocumentation": "Current EMP effect strength or NIL if object is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the time in seconds until the ship explodes",
          "name": "getTimeUntilExplosion",
          "parameters": "",
          "returnDocumentation": "Time until explosion or -1, if invalid handle or ship isn't exploding",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the callsign of the ship in the current mission",
          "name": "getCallsign",
          "parameters": "",
          "returnDocumentation": "The callsign or an empty string if the ship doesn't have a callsign or an error occurs",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the alternate class name of the ship",
          "name": "getAltClassName",
          "parameters": "",
          "returnDocumentation": "The alternate class name or an empty string if the ship doesn't have such a thing or an error occurs",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the maximum speed of the ship with the given energy on the engines",
          "name": "getMaximumSpeed",
          "parameters": "[number energy = 0.333]",
          "returnDocumentation": "The maximum speed or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets ships ETS systems to specified values",
          "name": "EtsSetIndexes",
          "parameters": "number Engine Index, number Shield Index, number Weapon Index",
          "returnDocumentation": "True if successful, false if target ships ETS was missing, or only has one system",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the ship's wing",
          "name": "getWing",
          "parameters": "",
          "returnDocumentation": "Wing handle, or invalid wing handle if ship is not part of a wing",
          "returnType": "wing",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the string which should be used when displaying the name of the ship to the player",
          "name": "getDisplayString",
          "parameters": "",
          "returnDocumentation": "The display string or empty if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship handle",
      "name": "ship",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Ship class name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Ship class name, or an empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Checks if the two classes are equal",
          "name": "__eq",
          "parameters": "shipclass, shipclass",
          "returnDocumentation": "true if equal false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Ship class name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Ship class name, or an empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class short name",
          "getterType": "string",
          "name": "ShortName",
          "returnDocumentation": "Ship short name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class type string",
          "getterType": "string",
          "name": "TypeString",
          "returnDocumentation": "Type string, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class maneuverability string",
          "getterType": "string",
          "name": "ManeuverabilityString",
          "returnDocumentation": "Maneuverability string, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class armor string",
          "getterType": "string",
          "name": "ArmorString",
          "returnDocumentation": "Armor string, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class manufacturer",
          "getterType": "string",
          "name": "ManufacturerString",
          "returnDocumentation": "Manufacturer, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class description",
          "getterType": "string",
          "name": "Description",
          "returnDocumentation": "Description, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class tech description",
          "getterType": "string",
          "name": "TechDescription",
          "returnDocumentation": "Tech description, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Afterburner fuel capacity",
          "getterType": "number",
          "name": "AfterburnerFuelMax",
          "returnDocumentation": "Afterburner capacity, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Maximum number of countermeasures the ship can carry",
          "getterType": "number",
          "name": "CountermeasuresMax",
          "returnDocumentation": "Countermeasure capacity, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model",
          "getterType": "model",
          "name": "Model",
          "returnDocumentation": "Ship class model, or invalid model handle if shipclass handle is invalid",
          "setterType": "model",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model used for first-person cockpit",
          "getterType": "model",
          "name": "CockpitModel",
          "returnDocumentation": "Cockpit model",
          "setterType": "model",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets the cockpit display information array of this ship class",
          "getterType": "cockpitdisplays",
          "name": "CockpitDisplays",
          "returnDocumentation": "Array handle containing the information or invalid handle on error",
          "setterType": "cockpitdisplays",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class hitpoints",
          "getterType": "number",
          "name": "HitpointsMax",
          "returnDocumentation": "Hitpoints, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class species",
          "getterType": "species",
          "name": "Species",
          "returnDocumentation": "Ship class species, or invalid species handle if shipclass handle is invalid",
          "setterType": "Species",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ship class type",
          "getterType": "shiptype",
          "name": "Type",
          "returnDocumentation": "Ship type, or invalid handle if shipclass handle is invalid",
          "setterType": "shiptype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Alternate name for ship class",
          "getterType": "string",
          "name": "AltName",
          "returnDocumentation": "Alternate string or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The score of this ship class",
          "getterType": "number",
          "name": "Score",
          "returnDocumentation": "The score or -1 on invalid ship class",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets whether or not the ship class is available in the techroom",
          "name": "isInTechroom",
          "parameters": "",
          "returnDocumentation": "Whether ship has been revealed in the techroom, false if handle is invalid",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws ship model as if in techroom",
          "name": "renderTechModel",
          "parameters": "X1, Y1, X2, Y2, [Rotation %=0, Pitch %=0, Bank %=40, number Zoom=1.3]",
          "returnDocumentation": "Whether ship was rendered",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Draws ship model as if in techroom",
          "name": "renderTechModel2",
          "parameters": "X1, Y1, X2, Y2, [orientation Orientation=nil, number Zoom=1.3]",
          "returnDocumentation": "Whether ship was rendered",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the model used for this shipclass is loaded or not and optionally loads the model, which might be a slow operation.",
          "name": "isModelLoaded",
          "parameters": "[boolean Load = false]",
          "returnDocumentation": "If the model is loaded or not",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the index valus of the ship class",
          "name": "getShipClassIndex",
          "parameters": "",
          "returnDocumentation": "index value of the ship class",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship class handle",
      "name": "shipclass",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of ship orders",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of ship orders, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Array of ship orders",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Order, or invalid order handle on failure",
          "returnType": "order",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship orders",
      "name": "shiporders",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of textures on ship",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of textures on ship, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Array of ship textures",
          "name": "__indexer",
          "parameters": "number Index/string TextureFilename",
          "returnDocumentation": "Texture, or invalid texture handle on failure",
          "returnType": "texture",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship textures handle",
      "name": "shiptextures",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Ship type name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Ship type name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship type handle",
      "name": "shiptype",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Pitch of sound, from 100 to 100000",
          "getterType": "number",
          "name": "Pitch",
          "returnDocumentation": "Pitch, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The remaining time of this sound handle",
          "name": "getRemainingTime",
          "parameters": "",
          "returnDocumentation": "Remaining time, or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the volume of this sound instance",
          "name": "setVolume",
          "parameters": "number",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the panning of this sound. Argument ranges from -1 for left to 1 for right",
          "name": "setPanning",
          "parameters": "number",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Sets the absolute position of the sound. If boolean argument is true then the value is given as a percentage<br>This operation fails if there is no backing soundentry!",
          "name": "setPosition",
          "parameters": "number[,boolean = true]",
          "returnDocumentation": "true if successfull, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Rewinds the sound by the given number of seconds<br>This operation fails if there is no backing soundentry!",
          "name": "rewind",
          "parameters": "number",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Skips the given number of seconds of the sound<br>This operation fails if there is no backing soundentry!",
          "name": "skip",
          "parameters": "number",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Specifies if this handle is currently playing",
          "name": "isPlaying",
          "parameters": "",
          "returnDocumentation": "true if playing, false if otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Stops the sound of this handle",
          "name": "stop",
          "parameters": "",
          "returnDocumentation": "true if succeeded, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether the whole handle is valid.<br><b>Warning:</b> This does not work for sounds started by a directly loaded sound file! Use isSoundValid() in that case instead.",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if only the sound is valid, should be used for non soundentry sounds",
          "name": "isSoundValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "sound instance handle",
      "name": "sound",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Updates the given 3D sound with the specified position and an optional range value",
          "name": "updatePosition",
          "parameters": "vector Position[, number radius = 0.0]",
          "returnDocumentation": "true if succeesed, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "3D sound instance handle",
      "name": "sound3D",
      "shortName": "",
      "superClass": "sound",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The default volume of this game sound. If the sound entry has a volume range then the maximum volume will be returned by this.",
          "getterType": "number",
          "name": "DefaultVolume",
          "returnDocumentation": "Volume in the range from 1 to 0 or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns the filename of this sound. If the sound has multiple entries then the filename of the first entry will be returned.",
          "name": "getFilename",
          "parameters": "",
          "returnDocumentation": "filename or empty string on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gives the length of the sound in seconds. If the sound has multiple entries or a pitch range then the maximum duration of the sound will be returned.",
          "name": "getDuration",
          "parameters": "",
          "returnDocumentation": "the length, or -1 on error",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Computes the volume and the panning of the sound when it would be played from the specified position.<br>If range is given then the volume will diminish when the listener is withing that distance to the source.<br>The position of the listener is always the the current viewing position.",
          "name": "get3DValues",
          "parameters": "vector Postion[, number radius=0.0]",
          "returnDocumentation": "The volume and the panning, in that sequence, or both -1 on error",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "sounds.tbl table entry handle",
      "name": "soundentry",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "The duration of the sound file, in seconds",
          "getterType": "number",
          "name": "Duration",
          "returnDocumentation": "The duration or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The filename of the file",
          "getterType": "string",
          "name": "Filename",
          "returnDocumentation": "The file name or empty string on error",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Plays the sound",
          "name": "play",
          "parameters": "[number volume = 1.0[, number panning = 0.0]]",
          "returnDocumentation": "A sound handle or invalid handle on error",
          "returnType": "sound",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Unloads the audio data loaded for this sound file. This invalidates the handle on which this is called!",
          "name": "unload",
          "parameters": "",
          "returnDocumentation": "true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the soundfile handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Handle to a sound file",
      "name": "soundfile",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Species name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Species name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Species handle",
      "name": "species",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Make the streaming animation loop.",
          "getterType": "boolean",
          "name": "Loop",
          "returnDocumentation": "Is the animation looping, or nil if anim invalid",
          "setterType": "[boolean loop]",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Pause the streaming animation.",
          "getterType": "boolean",
          "name": "Pause",
          "returnDocumentation": "Is the animation paused, or nil if anim invalid",
          "setterType": "[boolean pause]",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Make the streaming animation play in reverse.",
          "getterType": "boolean",
          "name": "Reverse",
          "returnDocumentation": "Is the animation playing in reverse, or nil if anim invalid",
          "setterType": "[boolean reverse]",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Get the filename of the animation",
          "name": "getFilename",
          "parameters": "",
          "returnDocumentation": "Filename or nil if invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the number of frames in the animation.",
          "name": "getFrameCount",
          "parameters": "",
          "returnDocumentation": "Total number of frames",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the current frame index of the animation",
          "name": "getFrameIndex",
          "parameters": "",
          "returnDocumentation": "Current frame index",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the height of the animation in pixels",
          "name": "getHeight",
          "parameters": "",
          "returnDocumentation": "Height or nil if invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the width of the animation in pixels",
          "name": "getWidth",
          "parameters": "",
          "returnDocumentation": "Width or nil if invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Load all apng animations into memory, enabling apng frame cache if not already enabled",
          "name": "preload",
          "parameters": "",
          "returnDocumentation": "true if preload was successful, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Processes a streaming animation, including selecting the correct frame & drawing it.",
          "name": "process",
          "parameters": "[int x1, int y1, int x2, int y2, float u0, float v0, float u1, float v1, float alpha, boolean draw]",
          "returnDocumentation": "True if processing was successful, otherwise nil",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Reset a streaming animation back to its 1st frame",
          "name": "reset",
          "parameters": "[none]",
          "returnDocumentation": "True if successful, otherwise nil",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the amount of time left in the animation, in seconds",
          "name": "timeLeft",
          "parameters": "",
          "returnDocumentation": "Time left in secs or nil if invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Unloads a streaming animation from memory",
          "name": "unload",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Streaming Animation handle",
      "name": "streaminganim",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Returns name of subsystem",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Subsystem name, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Current Armor class",
          "getterType": "string",
          "name": "ArmorClass",
          "returnDocumentation": "Armor class name, or empty string if none is set",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem AWACS intensity",
          "getterType": "number",
          "name": "AWACSIntensity",
          "returnDocumentation": "AWACS intensity, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem AWACS radius",
          "getterType": "number",
          "name": "AWACSRadius",
          "returnDocumentation": "AWACS radius, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Orientation of subobject or turret base",
          "getterType": "orientation",
          "name": "Orientation",
          "returnDocumentation": "Subsystem orientation, or null orientation if handle is invalid",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Orientation of turret gun",
          "getterType": "orientation",
          "name": "GunOrientation",
          "returnDocumentation": "Gun orientation, or null orientation if handle is invalid",
          "setterType": "orientation",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem hitpoints left",
          "getterType": "number",
          "name": "HitpointsLeft",
          "returnDocumentation": "Hitpoints left, or 0 if handle is invalid. Setting a value of 0 will disable it - set a value of -1 or lower to actually blow it up.",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem hitpoints max",
          "getterType": "number",
          "name": "HitpointsMax",
          "returnDocumentation": "Max hitpoints, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem position with regards to main ship (Local Vector)",
          "getterType": "vector",
          "name": "Position",
          "returnDocumentation": "Subsystem position, or null vector if subsystem handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem position in world space. This handles subsystem attached to a rotating submodel properly.",
          "getterType": "vector",
          "name": "WorldPosition",
          "returnDocumentation": "Subsystem position, or null vector if subsystem handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem gun position with regards to main ship (Local vector)",
          "getterType": "vector",
          "name": "GunPosition",
          "returnDocumentation": "Gun position, or null vector if subsystem handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Subsystem name, or an empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Returns the original name of the subsystem in the model file",
          "name": "getModelName",
          "parameters": "",
          "returnDocumentation": "name or empty string on error",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Array of primary weapon banks",
          "getterType": "weaponbanktype",
          "name": "PrimaryBanks",
          "returnDocumentation": "Primary banks, or invalid weaponbanktype handle if subsystem handle is invalid",
          "setterType": "weaponbanktype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Array of secondary weapon banks",
          "getterType": "weaponbanktype",
          "name": "SecondaryBanks",
          "returnDocumentation": "Secondary banks, or invalid weaponbanktype handle if subsystem handle is invalid",
          "setterType": "weaponbanktype",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object targeted by this subsystem. If used to set a new target, AI targeting will be switched off.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Targeted object, or invalid object handle if subsystem handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Specifies wether this turrets resets after a certain time of inactivity",
          "getterType": "boolean",
          "name": "TurretResets",
          "returnDocumentation": "true if turret resets, false otherwise",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The time (in milliseconds) after that the turret resets itself",
          "getterType": "number",
          "name": "TurretResetDelay",
          "returnDocumentation": "Reset delay",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The turn rate",
          "getterType": "number",
          "name": "TurnRate",
          "returnDocumentation": "Turnrate or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Targetability of this subsystem",
          "getterType": "boolean",
          "name": "Targetable",
          "returnDocumentation": "true if targetable, false otherwise or on error",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The radius of this subsystem",
          "getterType": "number",
          "name": "Radius",
          "returnDocumentation": "The radius or 0 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Whether the turret is locked. Setting to true locks the turret, setting to false frees it.",
          "getterType": "boolean",
          "name": "TurretLocked",
          "returnDocumentation": "True if turret is locked, false otherwise",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The next time the turret may attempt to fire",
          "getterType": "number",
          "name": "NextFireTimestamp",
          "returnDocumentation": "Mission time (seconds) or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The model path points belonging to this subsystem",
          "getterType": "modelpath",
          "name": "ModelPath",
          "returnDocumentation": "The model path of this subsystem",
          "setterType": "modelpath",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "If set to true, AI targeting for this turret is switched off. If set to false, the AI will take over again.",
          "name": "targetingOverride",
          "parameters": "boolean",
          "returnDocumentation": "Returns true if successful, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determine if a subsystem has fired",
          "name": "hasFired",
          "parameters": "",
          "returnDocumentation": "true if if fired, false if not fired, or nil if invalid. resets fired flag when called.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines if this subsystem is a turret",
          "name": "isTurret",
          "parameters": "",
          "returnDocumentation": "true if subsystem is turret, false otherwise or nil on error",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Determines if the object is in the turrets FOV",
          "name": "isTargetInFOV",
          "parameters": "object Target",
          "returnDocumentation": "true if in FOV, false if not, nil on error or if subsystem is not a turret ",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Fires weapon on turret",
          "name": "fireWeapon",
          "parameters": "[Turret weapon index = 1, Flak range = 100]",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Rotates the turret to face Pos or resets the turret to its original state",
          "name": "rotateTurret",
          "parameters": "vector Pos[, boolean reset=false",
          "returnDocumentation": "true on success false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the turrets forward vector",
          "name": "getTurretHeading",
          "parameters": "",
          "returnDocumentation": "Returns a normalized version of the forward vector or null vector on error",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns current turrets FOVs",
          "name": "getFOVs",
          "parameters": "",
          "returnDocumentation": "Standard FOV, maximum barrel elevation, turret base fov.",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Retrieves the next position and firing normal this turret will fire from. This function returns a world position",
          "name": "getNextFiringPosition",
          "parameters": "",
          "returnDocumentation": "vector or null vector on error",
          "returnType": {
            "elements": [
              "vector",
              "vector"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns current subsystems turret matrix",
          "name": "getTurretMatrix",
          "parameters": "",
          "returnDocumentation": "Turret matrix.",
          "returnType": "orientation",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "The object parent of this subsystem, is of type ship",
          "name": "getParent",
          "parameters": "",
          "returnDocumentation": "object handle or invalid handle on error",
          "returnType": "object",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks if the subsystem is in view from the specified position. This only checks for occlusion by the parent object, not by other objects in the mission.",
          "name": "isInViewFrom",
          "parameters": "vector from",
          "returnDocumentation": "true if in view, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship subsystem handle",
      "name": "subsystem",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Checks whether two teams are the same team",
          "name": "__eq",
          "parameters": "team, team",
          "returnDocumentation": "true if equal",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Team name",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Team name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Gets the IFF color of the specified Team",
          "name": "getColor",
          "parameters": "",
          "returnDocumentation": "rgb color for the specified team or nil if invalid",
          "returnType": {
            "elements": [
              "number",
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Checks the IFF status of another team",
          "name": "attacks",
          "parameters": "team",
          "returnDocumentation": "True if this team attacks the specified team",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Team handle",
      "name": "team",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Checks if two texture handles refer to the same texture",
          "name": "__eq",
          "parameters": "texture, texture",
          "returnDocumentation": "True if textures are equal",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns texture handle to specified frame number in current texture's animation.This means that [1] will always return the first frame in an animation, no matter what frame an animation is.You cannot change a texture animation frame.",
          "name": "__indexer",
          "parameters": "number",
          "returnDocumentation": "Texture handle, or invalid texture handle if index is invalid",
          "returnType": "texture",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Unloads a texture from memory",
          "name": "unload",
          "parameters": "",
          "returnDocumentation": "",
          "returnType": "void",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns filename for texture",
          "name": "getFilename",
          "parameters": "",
          "returnDocumentation": "Filename, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets texture width",
          "name": "getWidth",
          "parameters": "",
          "returnDocumentation": "Texture width, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets texture height",
          "name": "getHeight",
          "parameters": "",
          "returnDocumentation": "Texture height, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets frames-per-second of texture",
          "name": "getFPS",
          "parameters": "",
          "returnDocumentation": "Texture FPS, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets number of frames left, from handle's position in animation",
          "name": "getFramesLeft",
          "parameters": "",
          "returnDocumentation": "Frames left, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Get the frame number from the elapsed time of the animation<br>The 1st argument is the time that has elapsed since the animation started<br>If 2nd argument is set to true, the animation is expected to loop when the elapsed time exceeds the duration of a single playback",
          "name": "getFrame",
          "parameters": "number Elapsed time (secs), [boolean Loop]",
          "returnDocumentation": "Frame number",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Texture handle",
      "name": "texture",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of thrusters on this thrusterbank",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of thrusters on this bank or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Array of glowpoint",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Glowpoint, or invalid glowpoint handle on failure",
          "returnType": "glowpoint",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detectes if this handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if this handle is valid, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "A model thrusterbank",
      "name": "thrusterbank",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Number of thruster banks on the model",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of thrusterbanks",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Array of all thrusterbanks on this thruster",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Handle to the thrusterbank or invalid handle if index is invalid",
          "returnType": "thrusterbank",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "The thrusters of a model",
      "name": "thrusters",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Gets the value of this timestamp in seconds",
          "name": "getSeconds",
          "parameters": "",
          "returnDocumentation": "The timespan value in seconds",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "A difference between two time stamps",
      "name": "timespan",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Computes the difference between two timestamps",
          "name": "__sub",
          "parameters": "timestamp other",
          "returnDocumentation": "The time difference",
          "returnType": "timespan",
          "shortName": "",
          "type": "operator"
        }
      ],
      "description": "A real time time stamp of unspecified precision and resolution.",
      "name": "timestamp",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Value display string",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "The display string or nil on error",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Compares two value descriptions",
          "name": "__eq",
          "parameters": "ValueDescription other",
          "returnDocumentation": "True if equal, false otherwise",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Value display string",
          "getterType": "string",
          "name": "Display",
          "returnDocumentation": "The display string or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Serialized string value of the contained value",
          "getterType": "string",
          "name": "Serialized",
          "returnDocumentation": "The serialized string or nil on error",
          "setterType": "",
          "shortName": "",
          "type": "property"
        }
      ],
      "description": "An option value that contains a displayable string and the serialized value.",
      "name": "ValueDescription",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Vector component",
          "name": "__indexer",
          "parameters": "x,y,z or 1-3",
          "returnDocumentation": "Value at index, or 0 if vector handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Adds vector by another vector, or adds all axes by value",
          "name": "__add",
          "parameters": "number/vector",
          "returnDocumentation": "Final vector, or null vector if error occurs",
          "returnType": "vector",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Subtracts vector from another vector, or subtracts all axes by value",
          "name": "__sub",
          "parameters": "number/vector",
          "returnDocumentation": "Final vector, or null vector if error occurs",
          "returnType": "vector",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Scales vector object (Multiplies all axes by number), or multiplies each axes by the other vector's axes.",
          "name": "__mul",
          "parameters": "number/vector",
          "returnDocumentation": "Final vector, or null vector if error occurs",
          "returnType": "vector",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Scales vector object (Divide all axes by number), or divides each axes by the dividing vector's axes.",
          "name": "__div",
          "parameters": "number/vector",
          "returnDocumentation": "Final vector, or null vector if error occurs",
          "returnType": "vector",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Converts a vector to string with format \"(x,y,z)\"",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Vector as string, or empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Returns orientation object representing the direction of the vector. Does not require vector to be normalized.  Note: the orientation is constructed with the vector as the forward vector (fvec).  You can also specify up (uvec) and right (rvec) vectors as optional arguments.",
          "name": "getOrientation",
          "parameters": "",
          "returnDocumentation": "Orientation object, or null orientation object if handle is invalid",
          "returnType": "orientation",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the magnitude of a vector (Total regardless of direction)",
          "name": "getMagnitude",
          "parameters": "",
          "returnDocumentation": "Magnitude of vector, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Distance",
          "name": "getDistance",
          "parameters": "Vector",
          "returnDocumentation": "Returns distance from another vector",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns dot product of vector object with vector argument",
          "name": "getDotProduct",
          "parameters": "vector OtherVector",
          "returnDocumentation": "Dot product, or 0 if a handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns cross product of vector object with vector argument",
          "name": "getCrossProduct",
          "parameters": "vector OtherVector",
          "returnDocumentation": "Cross product, or null vector if a handle is invalid",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets screen cordinates of a world vector",
          "name": "getScreenCoords",
          "parameters": "",
          "returnDocumentation": "X (number), Y (number), or false if off-screen",
          "returnType": {
            "elements": [
              "number",
              "number"
            ],
            "type": "tuple"
          },
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns a normalized version of the vector",
          "name": "getNormalized",
          "parameters": "",
          "returnDocumentation": "Normalized Vector, or NIL if invalid",
          "returnType": "vector",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Vector object",
      "name": "vector",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Returns the waypoint list",
          "name": "getList",
          "parameters": "",
          "returnDocumentation": "waypointlist handle or invalid handle if waypoint was invalid",
          "returnType": "waypointlist",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "waypoint handle",
      "name": "waypoint",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Array of waypoints that are part of the waypoint list",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Waypoint, or invalid handle if the index or waypointlist handle is invalid",
          "returnType": "waypoint",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Number of waypoints in the list. Note that the value returned cannot be relied on for more than one frame.",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of waypoints in the list, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Name of WaypointList",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Waypointlist name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Return if this waypointlist handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "waypointlist handle",
      "name": "waypointlist",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Weapon's class",
          "getterType": "weaponclass",
          "name": "Class",
          "returnDocumentation": "Weapon class, or invalid weaponclass handle if weapon handle is invalid",
          "setterType": "weaponclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Whether weapon was destroyed by another weapon",
          "getterType": "boolean",
          "name": "DestroyedByWeapon",
          "returnDocumentation": "True if weapon was destroyed by another weapon, false if weapon was destroyed by another object or if weapon handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon life left (in seconds)",
          "getterType": "number",
          "name": "LifeLeft",
          "returnDocumentation": "Life left (seconds) or 0 if weapon handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Range at which flak will detonate (meters)",
          "getterType": "number",
          "name": "FlakDetonationRange",
          "returnDocumentation": "Detonation range (meters) or 0 if weapon handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Target of weapon. Value may also be a deriviative of the 'object' class, such as 'ship'.",
          "getterType": "object",
          "name": "Target",
          "returnDocumentation": "Weapon target, or invalid object handle if weapon handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Turret which fired this weapon.",
          "getterType": "subsystem",
          "name": "ParentTurret",
          "returnDocumentation": "Turret subsystem handle, or an invalid handle if the weapon not fired from a turret",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Object that weapon will home in on. Value may also be a deriviative of the 'object' class, such as 'ship'",
          "getterType": "object",
          "name": "HomingObject",
          "returnDocumentation": "Object that weapon is homing in on, or an invalid object handle if weapon is not homing or the weapon handle is invalid",
          "setterType": "object",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Position that weapon will home in on (World vector), setting this without a homing object in place will not have any effect!",
          "getterType": "vector",
          "name": "HomingPosition",
          "returnDocumentation": "Homing point, or null vector if weapon handle is invalid",
          "setterType": "vector",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Subsystem that weapon will home in on.",
          "getterType": "subsystem",
          "name": "HomingSubsystem",
          "returnDocumentation": "Homing subsystem, or invalid subsystem handle if weapon is not homing or weapon handle is invalid",
          "setterType": "subsystem",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon's team",
          "getterType": "team",
          "name": "Team",
          "returnDocumentation": "Weapon team, or invalid team handle if weapon handle is invalid",
          "setterType": "team",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Whether homing is overridden for this weapon. When homing is overridden then the engine will not update the homing position of the weapon which means that it can be handled by scripting.",
          "getterType": "boolean",
          "name": "OverrideHoming",
          "returnDocumentation": "true if homing is overridden",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Checks if the weapon is armed.",
          "name": "isArmed",
          "parameters": "[boolean Hit target]",
          "returnDocumentation": "boolean value of the weapon arming status",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Returns the collision information for this weapon",
          "name": "getCollisionInformation",
          "parameters": "",
          "returnDocumentation": "The collision information or invalid handle if none",
          "returnType": "collision_info",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Weapon handle",
      "name": "weapon",
      "shortName": "",
      "superClass": "object",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Class of weapon mounted in the bank",
          "getterType": "weaponclass",
          "name": "WeaponClass",
          "returnDocumentation": "Weapon class, or an invalid weaponclass handle if bank handle is invalid",
          "setterType": "weaponclass",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Ammo left for the current bank",
          "getterType": "number",
          "name": "AmmoLeft",
          "returnDocumentation": "Ammo left, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Maximum ammo for the current bank<br><b>Note:</b> Setting this value actually sets the <i>capacity</i> of the weapon bank. To set the actual maximum ammunition use <tt>AmmoMax = <amount> * class.CargoSize</tt>",
          "getterType": "number",
          "name": "AmmoMax",
          "returnDocumentation": "Ammo capacity, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon armed status. Does not take linking into account.",
          "getterType": "boolean",
          "name": "Armed",
          "returnDocumentation": "True if armed, false if unarmed or handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The actual capacity of a weapon bank as specified in the table",
          "getterType": "number",
          "name": "Capacity",
          "returnDocumentation": "The capacity or -1 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The FOF cooldown value. A value of 0 means the default weapon FOF is used. A value of 1 means that the max FOF will be used",
          "getterType": "number",
          "name": "FOFCooldown",
          "returnDocumentation": "The cooldown value or -1 if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Ship/subystem weapons bank handle",
      "name": "weaponbank",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Array of weapon banks",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Weapon bank, or invalid handle on failure",
          "returnType": "weaponbank",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Whether bank is in linked or unlinked fire mode (Primary-only)",
          "getterType": "boolean",
          "name": "Linked",
          "returnDocumentation": "Link status, or false if handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Whether bank is in dual fire mode (Secondary-only)",
          "getterType": "boolean",
          "name": "DualFire",
          "returnDocumentation": "Dual fire status, or false if handle is invalid",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Number of weapons in the mounted bank",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of bank weapons, or 0 if handle is invalid",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        }
      ],
      "description": "Ship/subsystem weapons bank type handle",
      "name": "weaponbanktype",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Weapon class name",
          "name": "__tostring",
          "parameters": "",
          "returnDocumentation": "Weapon class name, or an empty string if handle is invalid",
          "returnType": "string",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Checks if the two classes are equal",
          "name": "__eq",
          "parameters": "weaponclass, weaponclass",
          "returnDocumentation": "true if equal false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Weapon class name. This is the possibly untranslated name. Use tostring(class) to get the string which should be shown to the user.",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Weapon class name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The alternate weapon class name.",
          "getterType": "string",
          "name": "AltName",
          "returnDocumentation": "Alternate weapon class name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class title",
          "getterType": "string",
          "name": "Title",
          "returnDocumentation": "Weapon class title, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class description string",
          "getterType": "string",
          "name": "Description",
          "returnDocumentation": "Description string, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class tech title",
          "getterType": "string",
          "name": "TechTitle",
          "returnDocumentation": "Tech title, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class animation filename",
          "getterType": "string",
          "name": "TechAnimationFilename",
          "returnDocumentation": "Filename, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon class tech description string",
          "getterType": "string",
          "name": "TechDescription",
          "returnDocumentation": "Description string, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Model",
          "getterType": "model",
          "name": "Model",
          "returnDocumentation": "Weapon class model, or invalid model handle if weaponclass handle is invalid",
          "setterType": "model",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Amount of weapon damage applied to ship hull (0-1.0)",
          "getterType": "number",
          "name": "ArmorFactor",
          "returnDocumentation": "Armor factor, or empty string if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Amount of damage that weapon deals",
          "getterType": "number",
          "name": "Damage",
          "returnDocumentation": "Damage amount, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon fire wait (cooldown time) in seconds",
          "getterType": "number",
          "name": "FireWait",
          "returnDocumentation": "Fire wait time, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The time the weapon will fly before turing onto its target",
          "getterType": "number",
          "name": "FreeFlightTime",
          "returnDocumentation": "Free flight time or emty string if invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Life of weapon in seconds",
          "getterType": "number",
          "name": "LifeMax",
          "returnDocumentation": "Life of weapon, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Range of weapon in meters",
          "getterType": "number",
          "name": "Range",
          "returnDocumentation": "Weapon Range, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon mass",
          "getterType": "number",
          "name": "Mass",
          "returnDocumentation": "Weapon mass, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Amount of weapon damage applied to ship shields (0-1.0)",
          "getterType": "number",
          "name": "ShieldFactor",
          "returnDocumentation": "Shield damage factor, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Amount of weapon damage applied to ship subsystems (0-1.0)",
          "getterType": "number",
          "name": "SubsystemFactor",
          "returnDocumentation": "Subsystem damage factor, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "LOD used for weapon model in the targeting computer",
          "getterType": "number",
          "name": "TargetLOD",
          "returnDocumentation": "LOD number, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Weapon max speed, aka $Velocity in weapons.tbl",
          "getterType": "number",
          "name": "Speed",
          "returnDocumentation": "Weapon speed, or 0 if handle is invalid",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Is weapon class flagged as bomb",
          "getterType": "boolean",
          "name": "Bomb",
          "returnDocumentation": "New flag",
          "setterType": "boolean",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "The cargo size of this weapon class",
          "getterType": "number",
          "name": "CargoSize",
          "returnDocumentation": "The new cargo size or -1 on error",
          "setterType": "number",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Gets the index value of the weapon class",
          "name": "getWeaponClassIndex",
          "parameters": "",
          "returnDocumentation": "index value of the weapon class",
          "returnType": "number",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is a primary weapon (this includes Beams). This function is deprecated, use isPrimary instead.",
          "name": "isLaser",
          "parameters": "",
          "returnDocumentation": "true if the weapon is a primary, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is a secondary weapon. This function is deprecated, use isSecondary instead.",
          "name": "isMissile",
          "parameters": "",
          "returnDocumentation": "true if the weapon is a secondary, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is a primary weapon (this includes Beams)",
          "name": "isPrimary",
          "parameters": "",
          "returnDocumentation": "true if the weapon is a primary, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is a secondary weapon",
          "name": "isSecondary",
          "parameters": "",
          "returnDocumentation": "true if the weapon is a secondary, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is a beam",
          "name": "isBeam",
          "parameters": "",
          "returnDocumentation": "true if the weapon is a beam, false otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Return true if the weapon is paged in.",
          "name": "isWeaponUsed",
          "parameters": "",
          "returnDocumentation": "True if the weapon is paged in, false if otherwise",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        },
        {
          "children": [],
          "description": "Pages in a weapon. Returns True on success.",
          "name": "loadWeapon",
          "parameters": "",
          "returnDocumentation": "True if page in was successful, false otherwise.",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Weapon class handle",
      "name": "weaponclass",
      "shortName": "",
      "superClass": "",
      "type": "class"
    },
    {
      "children": [
        {
          "children": [],
          "description": "Array of ships in the wing",
          "name": "__indexer",
          "parameters": "number Index",
          "returnDocumentation": "Ship handle, or invalid ship handle if index is invalid or wing handle is invalid",
          "returnType": "ship",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Gets the number of ships in the wing",
          "name": "__len",
          "parameters": "",
          "returnDocumentation": "Number of ships in wing, or 0 if invalid handle",
          "returnType": "number",
          "shortName": "",
          "type": "operator"
        },
        {
          "children": [],
          "description": "Name of Wing",
          "getterType": "string",
          "name": "Name",
          "returnDocumentation": "Wing name, or empty string if handle is invalid",
          "setterType": "string",
          "shortName": "",
          "type": "property"
        },
        {
          "children": [],
          "description": "Detects whether handle is valid",
          "name": "isValid",
          "parameters": "",
          "returnDocumentation": "true if valid, false if handle is invalid, nil if a syntax/type error occurs",
          "returnType": "boolean",
          "shortName": "",
          "type": "function"
        }
      ],
      "description": "Wing handle",
      "name": "wing",
      "shortName": "",
      "superClass": "",
      "type": "class"
    }
  ],
  "enums": {
    "ALPHABLEND_FILTER": 14,
    "ALPHABLEND_NONE": 27,
    "CFILE_TYPE_MEMORY_MAPPED": 21,
    "CFILE_TYPE_NORMAL": 20,
    "LOCK": 12,
    "LUA_ADDITIVE_BUTTON_CONTROL": 52,
    "LUA_FULL_CONTROLS": 50,
    "LUA_OVERRIDE_BUTTON_CONTROL": 53,
    "LUA_STEERING_CONTROLS": 49,
    "MESSAGE_PRIORITY_HIGH": 73,
    "MESSAGE_PRIORITY_LOW": 71,
    "MESSAGE_PRIORITY_NORMAL": 72,
    "MISSION_REPEAT": 47,
    "MOUSE_LEFT_BUTTON": 1,
    "MOUSE_MIDDLE_BUTTON": 3,
    "MOUSE_RIGHT_BUTTON": 2,
    "NONE": 15,
    "NORMAL_BUTTON_CONTROLS": 51,
    "NORMAL_CONTROLS": 48,
    "OPTION_TYPE_RANGE": 79,
    "OPTION_TYPE_SELECTION": 78,
    "ORDER_ATTACK": 28,
    "ORDER_ATTACK_ANY": 29,
    "ORDER_ATTACK_SHIP_CLASS": 74,
    "ORDER_ATTACK_WING": 69,
    "ORDER_DEPART": 30,
    "ORDER_DISABLE": 31,
    "ORDER_DISARM": 32,
    "ORDER_DOCK": 33,
    "ORDER_EVADE": 34,
    "ORDER_FLY_TO": 35,
    "ORDER_FORM_ON_WING": 36,
    "ORDER_GUARD": 37,
    "ORDER_GUARD_WING": 70,
    "ORDER_IGNORE_SHIP": 38,
    "ORDER_KEEP_SAFE_DISTANCE": 39,
    "ORDER_PLAY_DEAD": 40,
    "ORDER_PLAY_DEAD_PERSISTENT": 77,
    "ORDER_REARM": 41,
    "ORDER_STAY_NEAR": 42,
    "ORDER_STAY_STILL": 43,
    "ORDER_UNDOCK": 44,
    "ORDER_WAYPOINTS": 45,
    "ORDER_WAYPOINTS_ONCE": 46,
    "PARTICLE_BITMAP": 5,
    "PARTICLE_DEBUG": 4,
    "PARTICLE_FIRE": 6,
    "PARTICLE_PERSISTENT_BITMAP": 9,
    "PARTICLE_SMOKE": 7,
    "PARTICLE_SMOKE2": 8,
    "SEXPVAR_CAMPAIGN_PERSISTENT": 22,
    "SEXPVAR_NOT_PERSISTENT": 23,
    "SEXPVAR_PLAYER_PERSISTENT": 24,
    "SEXPVAR_TYPE_NUMBER": 25,
    "SEXPVAR_TYPE_STRING": 26,
    "SHIELD_BACK": 19,
    "SHIELD_FRONT": 16,
    "SHIELD_LEFT": 17,
    "SHIELD_RIGHT": 18,
    "TEXTURE_DYNAMIC": 11,
    "TEXTURE_STATIC": 10,
    "UNLOCK": 13,
    "VM_CAMERA_LOCKED": 75,
    "VM_CENTERING": 76,
    "VM_CHASE": 58,
    "VM_DEAD_VIEW": 57,
    "VM_EXTERNAL": 55,
    "VM_EXTERNAL_CAMERA_LOCKED": 60,
    "VM_FREECAMERA": 68,
    "VM_INTERNAL": 54,
    "VM_OTHER_SHIP": 59,
    "VM_PADLOCK_LEFT": 64,
    "VM_PADLOCK_REAR": 63,
    "VM_PADLOCK_RIGHT": 65,
    "VM_PADLOCK_UP": 62,
    "VM_TOPDOWN": 67,
    "VM_TRACK": 56,
    "VM_WARPIN_ANCHOR": 66,
    "VM_WARP_CHASE": 61
  },
  "globalVars": [
    {
      "description": "The player object in a mission. Does not need to be a ship (e.g. in multiplayer). Not present if not in a game play state.",
      "name": "Player",
      "type": "object"
    }
  ],
  "version": 2
}